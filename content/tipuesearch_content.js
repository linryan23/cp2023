var tipuesearch = {"pages": [{'title': 'About', 'text': ' https://github.com/mdecycu/cmsite \n', 'tags': '', 'url': 'About.html'}, {'title': 'w5', 'text': '// 包含標準輸出入程式庫的標頭文件\n// https://blog.csdn.net/weixin_38468077/article/details/101069365\n// http://www.gnuplot.info/demo/\n// https://github.com/sysprog21/rv32emu\n// https://github.com/sysprog21/semu \n// https://docs.google.com/presentation/d/14N0cWG2SnBSqhc2cLF0_2VerB9FF8JN3\n// https://cs61c.org/fa23/\n// https://greenteapress.com/wp/think-python-2e/\n// https://github.com/ecalvadi/c99-examples\n// https://github.com/gouravthakur39/beginners-C-program-examples\n// https://github.com/ergenekonyigit/Numerical-Analysis-Examples\n// https://www.che.ncku.edu.tw/facultyweb/changct/html/teaching/CPPandMATLAB/Past/pdf%20Files/Chap02-Ling.pdf\n// https://gteceducation.com.sg/Brochures/PROGRAMMING/C%20PROGRAMMING%20FULL.pdf\n// https://jsommers.github.io/cbook/cbook.pdf\n// https://jsommers.github.io/cbook/index.html\n// http://student.itee.uq.edu.au/courses/csse2310/CProgrammingNotes.pdf\n// http://cslibrary.stanford.edu/101/EssentialC.pdf\n// https://publications.gbdirect.co.uk/c_book/\n// https://www.fossil-scm.org/fossil-book/doc/2ndEdition/fossilbook.pdf\n// ***** execute on replit \n// cd downloads\n// cc gnuplot_ex1.c -o gnuplot_ex1\n// ./gnuplot_ex1\n#include <stdio.h>\n  \n// 主函式\nint main() {\n    // Start a Gnuplot process using popen\n    FILE *gnuplotPipe = popen("gnuplot -persistent", "w");\n    if (!gnuplotPipe) {\n        fprintf(stderr, "Failed to start Gnuplot.\\n");\n        return 1;\n    }\n  \n    // Use Gnuplot plotting commands, specify font and output as PNG\n    fprintf(gnuplotPipe, "set terminal png font \'default,10\' size 800,400\\n");\n    fprintf(gnuplotPipe, "set output \'./../images/gnuplot_ex1.png\'\\n");\n    fprintf(gnuplotPipe, "plot sin(x)");\n    // Close popen\n    pclose(gnuplotPipe);\n  \n    return 0;\n} \n clear \n cd downloads \n cc gnuplot_ex1.c \n ./a.out \n \n', 'tags': '', 'url': 'w5.html'}, {'title': 'w6', 'text': '#include <stdio.h>\n#include <gd.h>\n#include <math.h>\n\nvoid draw_roc_flag(gdImagePtr img);\nvoid draw_white_sun(gdImagePtr img, int center_x, int center_y, int sun_radius, int white, int red, int blue);\n\nint main() {\n    // width 3: height 2\n    int width = 1200;\n    int height = (int)(width*2.0 / 3.0);\n\n    gdImagePtr img = gdImageCreateTrueColor(width, height);\n    gdImageAlphaBlending(img, 0);\n\n    draw_roc_flag(img);\n\n    FILE *outputFile = fopen("./roc_flag.png", "wb");\n    if (outputFile == NULL) {\n        fprintf(stderr, "Error opening the output file.\\n");\n        return 1;\n    }\n    gdImagePngEx(img, outputFile, 9);\n    fclose(outputFile);\n    gdImageDestroy(img);\n    return 0;\n}\n\nvoid draw_roc_flag(gdImagePtr img) {\n    int width = gdImageSX(img);\n    int height = gdImageSY(img);\n    int red, white, blue;\n    int center_x = (int)(width/4);\n    int center_y = (int)(height/4);\n    int sun_radius = (int)(width/8);\n\n    // Colors for the flag\n    red = gdImageColorAllocate(img, 242, 0, 0); // Red color\n    white = gdImageColorAllocate(img, 255, 255, 255); // White stripes\n    blue = gdImageColorAllocate(img, 0, 41, 204); // Blue\n\n    // 繪製紅色矩形區域\n    gdImageFilledRectangle(img, 0, 0, width, height, red);\n\n    // 繪製藍色矩形區域\n    gdImageFilledRectangle(img, 0, 0, (int)(width/2.0), (int)(height/2.0), blue);\n\n    // 繪製太陽\n    draw_white_sun(img, center_x, center_y, sun_radius, white, red, blue);\n}\nvoid draw_white_sun(gdImagePtr img, int center_x, int center_y, int sun_radius, int white, int red, int blue) {\n    float angle = 0;\n    int numRays = 12; // 光芒的數量\n\n    gdPoint points[3]; // 三個頂點的陣列\n\n    for (int i = 0; i < numRays; i++) {\n        angle = i * (2 * M_PI / numRays);\n        float x1 = center_x + cos(angle) * sun_radius;\n        float y1 = center_y + sin(angle) * sun_radius;\n\n        // 調整兩個底邊頂點的位置\n      float x2 = center_x + cos(angle + 0.35) * (sun_radius * 0.5);\n      float y2 = center_y + sin(angle + 0.35) * (sun_radius * 0.5);\n      float x3 = center_x + cos(angle - 0.35) * (sun_radius * 0.5);\n      float y3 = center_y + sin(angle - 0.35) * (sun_radius * 0.5);\n\n        // 設定多邊形的三個頂點\n        points[0].x = (int)x1;\n        points[0].y = (int)y1;\n        points[1].x = (int)x2;\n        points[1].y = (int)y2;\n        points[2].x = (int)x3;\n        points[2].y = (int)y3;\n\n        gdImageFilledPolygon(img, points, 3, white);\n    }\n  //外圈\n  gdImageFilledEllipse(img, center_x, center_y, sun_radius * 1.2, sun_radius * 1.2, blue);\n  \n    // 繪製太陽內部\n    gdImageFilledEllipse(img, center_x, center_y, sun_radius * 1.1, sun_radius * 1.1, white);\n} \n \n clear \n cd downloads \n cc gd_roc_flag.c -lgd -lm \n ./a.out\xa0 \n #include <stdio.h>\n#include <gd.h>\n#include <math.h>\n\nvoid draw_usa_flag(gdImagePtr img);\nvoid draw_star(gdImagePtr img, int x, int y, int size, int color, double rotation_angle);\n\nint main() {\n    int width = 800;\n    int height = (int)(width / 1.9);\n\n    gdImagePtr img = gdImageCreateTrueColor(width, height);\n    gdImageAlphaBlending(img, 0);\n\n    draw_usa_flag(img);\n\n    FILE *outputFile = fopen("./../images/usa_flag.png", "wb");\n    if (outputFile == NULL) {\n        fprintf(stderr, "打开输出文件时出错。\\n");\n        return 1;\n    }\n\n    gdImagePngEx(img, outputFile, 9);\n    fclose(outputFile);\n    gdImageDestroy(img);\n\n    return 0;\n}\n\nvoid draw_usa_flag(gdImagePtr img) {\n    int width = gdImageSX(img);\n    int height = gdImageSY(img);\n    int red, white, blue;\n    // 国旗颜色\n    red = gdImageColorAllocate(img, 178, 34, 52); // 红色条纹\n    white = gdImageColorAllocate(img, 255, 255, 255); // 白色条纹\n    blue = gdImageColorAllocate(img, 60, 59, 110); // 蓝色矩形\n\n    int stripe_height = height / 13;\n    int stripe_width = width;\n    int star_size = (int)(0.0308 * height); // 星星大小\n\n    for (int y = 0; y < height; y += stripe_height) {\n        if (y / stripe_height % 2 == 0) {\n            gdImageFilledRectangle(img, 0, y, stripe_width, y + stripe_height, red);\n        } else {\n            gdImageFilledRectangle(img, 0, y, stripe_width, y + stripe_height, white);\n        }\n    }\n\n    gdImageFilledRectangle(img, 0, 0, width * 2 / 5, stripe_height * 7, blue);\n\n    int star_spacing_x = (int)(0.129 * height); // 横向星星之间的间距\n    int star_spacing_y = (int)(0.054 * height); // 纵向星星之间的间距\n    int star_start_x = (int)(0.125 * height); // 星星的起始X位置\n    int star_start_y = (int)(0.0485 * height); // 星星的起始Y位置\n\n    for (int row = 0; row < 9; row++) {\n        int starsPerRow = (row % 2 == 0) ? 6 : 5;\n\n        // 计算2、4、6和8排星星的偏移量\n        int offset_x = (row % 2 == 0) ? star_spacing_x / -2 : 0;\n\n        for (int star = 0; star < starsPerRow; star++) {\n            int x = star_start_x + star * star_spacing_x + offset_x;\n\n            // 旋转角度（以弧度为单位）\n            double rotation_angle = M_PI / 5; // 忘記多少度的旋转\n\n            int y = star_start_y + row * star_spacing_y;\n            draw_star(img, x, y, star_size, white, rotation_angle);\n        }\n    }\n}\n\nvoid draw_star(gdImagePtr img, int x, int y, int size, int color, double rotation_angle) {\n    gdPoint points[10];\n\n    for (int i = 0; i < 10; i++) {\n        double angle = M_PI / 2 + i * 2 * M_PI / 10 + rotation_angle;\n        int radius = (i % 2 == 0) ? size : size / 2;\n        points[i].x = x + radius * cos(angle);\n        points[i].y = y + radius * sin(angle);\n    }\n\n    // 用指定的颜色填充星星\n    gdImageFilledPolygon(img, points, 10, color);\n} \n \n clear \n cd downloads \n cc gd_usa_flag.c -lgd -lm \n ./a.out\xa0 \n', 'tags': '', 'url': 'w6.html'}, {'title': '自行練習', 'text': '#include <stdio.h>\n#include <gd.h>\n\nint main() {\n    // Create a new GD image (Italian flag dimensions: 900x600)\n    gdImagePtr im = gdImageCreateTrueColor(900, 600);\n\n    // Define colors (RGB format)\n    int green = gdImageColorAllocate(im, 0, 146, 70);\n    int white = gdImageColorAllocate(im, 255, 255, 255);\n    int red = gdImageColorAllocate(im, 206, 43, 55);\n\n    // Draw vertical stripes (3 equal-width stripes)\n    int stripeWidth = 900 / 3;\n    gdImageFilledRectangle(im, 0, 0, stripeWidth - 1, 599, green);\n    gdImageFilledRectangle(im, stripeWidth, 0, 2 * stripeWidth - 1, 599, white);\n    gdImageFilledRectangle(im, 2 * stripeWidth, 0, 899, 599, red);\n\n    // Save the image to a file\n    FILE *outputFile = fopen("italian_flag.png", "wb");\n    gdImagePng(im, outputFile);\n    fclose(outputFile);\n\n    // Free the GD image\n    gdImageDestroy(im);\n\n    return 0;\n}\n \n \n #include <stdio.h>\n#include <gd.h>\n\nint main() {\n    // Create a new GD image (German flag dimensions: 900x600)\n    gdImagePtr im = gdImageCreateTrueColor(900, 600);\n\n    // Define colors (RGB format)\n    int black = gdImageColorAllocate(im, 0, 0, 0);\n    int red = gdImageColorAllocate(im, 255, 0, 0);\n    int gold = gdImageColorAllocate(im, 255, 206, 0);\n\n    // Draw horizontal stripes (3 equal-height stripes)\n    int stripeHeight = 600 / 3;\n    gdImageFilledRectangle(im, 0, 0, 899, stripeHeight - 1, black);\n    gdImageFilledRectangle(im, 0, stripeHeight, 899, 2 * stripeHeight - 1, red);\n    gdImageFilledRectangle(im, 0, 2 * stripeHeight, 899, 599, gold);\n\n    // Save the image to a file\n    FILE *outputFile = fopen("german_flag.png", "wb");\n    gdImagePng(im, outputFile);\n    fclose(outputFile);\n\n    // Free the GD image\n    gdImageDestroy(im);\n\n    return 0;\n}\n \n', 'tags': '', 'url': '自行練習.html'}, {'title': 'w7', 'text': '#include <stdio.h>\n#include <gd.h>\n#include <math.h>\n\nvoid draw_uk_flag(gdImagePtr img);\nvoid fillTriangle(gdImagePtr img, int x1, int y1, int x2, int y2, int x3, int y3, int color);\n\nint main() {\n// 设置国旗的宽和高\nint width = 1200;\nint height = width / 2;\n\n// 创建图像\ngdImagePtr img = gdImageCreateTrueColor(width, height);\ngdImageAlphaBlending(img, 0);\n\n// 绘制英国国旗\ndraw_uk_flag(img);\n\n// 将图像保存到文件\nFILE *outputFile = fopen("./../images/uk_flag.png", "wb");\nif (outputFile == NULL) {\nfprintf(stderr, "打开输出文件时发生错误。\\n");\nreturn 1;\n}\ngdImagePngEx(img, outputFile, 9);\nfclose(outputFile);\ngdImageDestroy(img);\nreturn 0;\n}\n\n\n\nvoid draw_uk_flag(gdImagePtr img) {\nint width = gdImageSX(img);\nint height = gdImageSY(img);\n\nint red, white, blue;\nred = gdImageColorAllocate(img, 204, 0, 0); // 红色\nwhite = gdImageColorAllocate(img, 255, 255, 255); // 白色\nblue = gdImageColorAllocate(img, 0, 0, 153); // 蓝色\n\ngdImageFilledRectangle(img, 0, 0, width, height, blue);\n\n\nint x1, y1, x2, y2, x3, y3;\n{\nint line_thickness = 100;\ngdImageSetThickness(img, line_thickness);\n\nint x1, y1, x2, y2, x3, y3;\n\n// 绘制白色斜线\nx1 = 0;\ny1 = 600;\nx2 = 1200;\ny2 = 0;\ngdImageLine(img, x1, y1, x2, y2, white);\n\nx1 = 0;\ny1 = 0;\nx2 = 1200;\ny2 = 600;\ngdImageLine(img, x1, y1, x2, y2, white);\n}\n{\nint line_thickness = 33;\ngdImageSetThickness(img, line_thickness);\n\n\n// 绘制红色斜线\nx1 = 566;\ny1 = 300;\nx2 = 1166;\ny2 = 0;\ngdImageLine(img, x1, y1, x2, y2, red);\n\nx1 = 1233;\ny1 = 600;\nx2 = 633;\ny2 = 300;\ngdImageLine(img, x1, y1, x2, y2, red);\n\nx1 = 566;\ny1 = 300;\nx2 = -33;\ny2 = 0;\ngdImageLine(img, x1, y1, x2, y2, red);\n\nx1 = 600;\ny1 = 316.5;\nx2 = 0;\ny2 = 616.5;\ngdImageLine(img, x1, y1, x2, y2, red);\n}\n{\nint line_thickness = 33;\ngdImageSetThickness(img, line_thickness);\n\nint x1, y1, x2, y2, x3, y3;\n\n// 绘制 斜线\nx1 = 0;\ny1 = 600;\nx2 = 1200;\ny2 = 0;\ngdImageLine(img, x1, y1, x2, y2, red );\n\n\nx1 = 1200;\ny1 = 16.5;\nx2 = 600;\ny2 = 316.5;\ngdImageLine(img, x1, y1, x2, y2, white);\n\n\nx1 = 0;\ny1 = 583.5;\nx2 = 600;\ny2 = 283.5;\ngdImageLine(img, x1, y1, x2, y2, white);\n\n\n}\n\n// 绘制白色十字\nint cross_width = width / 32;\nint cross_arm_width = width / 32;\nint center_x = width / 2;\nint center_y = height / 2;\n\ngdImageFilledRectangle(img, center_x + 2.7 * cross_width, 0, center_x - 2.7 * cross_width, height, white);\ngdImageFilledRectangle(img, 0, center_y + 2.7 * cross_arm_width, width, center_y - 2.7 * cross_arm_width, white);\n\n// 绘制红色十字\ngdImageFilledRectangle(img, center_x + 1.5 * cross_width, 0, center_x - 1.5 * cross_width, height, red);\ngdImageFilledRectangle(img, 0, center_y + 1.5 * cross_arm_width, width, center_y - 1.5 * cross_arm_width, red);\n} \n \n \n #include <stdio.h>\n#include <gd.h>\n#include <math.h>\n\nvoid draw_japan_flag(gdImagePtr img);\nvoid draw_white_sun(gdImagePtr img, int center_x, int center_y, int sun_radius, int white, int red );\n\nint main() {\n// width 3: height 2\nint width = 1200;\nint height = 2 * width / 3;\n\ngdImagePtr img = gdImageCreateTrueColor(width, height);\ngdImageAlphaBlending(img, 0);\n\ndraw_japan_flag(img);\n\nFILE *outputFile = fopen("./../images/japan_flag.png", "wb");\nif (outputFile == NULL) {\nfprintf(stderr, "Error opening the output file.\\n");\nreturn 1;\n}\ngdImagePngEx(img, outputFile, 9);\nfclose(outputFile);\ngdImageDestroy(img);\nreturn 0;\n}\n\nvoid draw_japan_flag(gdImagePtr img) {\nint width = gdImageSX(img);\nint height = gdImageSY(img);\nint red, white ;\nint center_x = 0.5 * width;\nint center_y = 0.5 * height;\nint sun_radius = 145 ;\n\n// Colors for the flag\nred = gdImageColorAllocate(img, 242, 0, 0); // Red color\nwhite = gdImageColorAllocate(img, 255, 255, 255); // White stripes\n\n\n// 繪製白色矩形區域\ngdImageFilledRectangle(img, 0, 0, width, height, white);\n\n\n// 繪製太陽內部\ngdImageFilledEllipse(img, center_x, center_y, sun_radius * 3, sun_radius * 3, red);\n} \n \n \n #include <stdio.h>\n#include <gd.h>\n#include <math.h>\n\nvoid draw_chinese_flag(gdImagePtr img);\n\nint main() {\nint width = 300; // 國旗寬度\nint height = 200; // 國旗高度\n\ngdImagePtr im = gdImageCreateTrueColor(width, height);\ngdImageAlphaBlending(im, 0);\n\ndraw_chinese_flag(im);\n\nFILE *outputFile = fopen("./../images/proc_flag.png", "wb");\nif (outputFile == NULL) {\nfprintf(stderr, "打开输出文件时出错。\\n");\nreturn 1;\n}\n\ngdImagePngEx(im, outputFile, 9);\nfclose(outputFile);\ngdImageDestroy(im);\n\nreturn 0;\n}\n\n// 声明 draw_star 函数\nvoid draw_star(gdImagePtr img, int x, int y, int size, int color, double rotation_angle);\n\nvoid draw_chinese_flag(gdImagePtr img) {\nint width = gdImageSX(img);\nint height = gdImageSY(img);\nint red, yellow;\n\n// 國旗顏色\nred = gdImageColorAllocate(img, 255, 0, 0); // 紅色背景\nyellow = gdImageColorAllocate(img, 255, 255, 0); // 黃色星星\n\n// 畫紅色背景\ngdImageFilledRectangle(img, 0, 0, width, height, red);\n\n// 設置星星的大小和位置\nint star_size = (int)(0.28 * height);\nint star_x = (int)(0.165 * width);\nint star_y = (int)(0.265 * height);\n\n// 畫大星星\ndraw_star(img, star_x, star_y, star_size, yellow, 11.0);\n\n// 繪製小星星，位置根據實際國旗比例計算\ndouble radius = 0.15 * height;\ndouble angle = 360 / 7 * M_PI / 179.0;\ndouble rotation = -M_PI / 7.5;\nint cx = (int)(0.32 * width);\nint cy = (int)(0.27 * height);\n\nfor (int i = -1; i < 3; i++) {\nint x = (int)(cx + radius * cos(i * angle + rotation));\nint y = (int)(cy + radius * sin(i * angle + rotation));\ndraw_star(img, x, y, 19, yellow, M_PI / 5.0);\n}\n}\n\nvoid draw_star(gdImagePtr img, int x, int y, int size, int color, double rotation_angle) {\ngdPoint points[10];\n\n// 计算星形的五个外点和五个内点\ndouble outer_radius = size / 2;\ndouble inner_radius = size / 6;\ndouble angle = M_PI / 5.0;\n\nfor (int i = 0; i < 10; i++) {\ndouble radius = (i % 2 == 0) ? outer_radius : inner_radius;\ndouble theta = rotation_angle + i * angle;\npoints[i].x = x + radius * cos(theta);\npoints[i].y = y + radius * sin(theta);\n}\n\n// 使用 gdImageFilledPolygon 绘制星形\ngdImageFilledPolygon(img, points, 10, color);\n} \n \n #include <stdio.h>\n#include <gd.h>\n#include <math.h>\n\n#define WIDTH 900\n#define HEIGHT 600\n#define FILENAME "south_korea_flag.png"\n\nint main() {\n    gdImagePtr im;\n    FILE *pngout;\n    int white, black, red, blue;\n\n    im = gdImageCreate(WIDTH, HEIGHT);\n\n    white = gdImageColorAllocate(im, 255, 255, 255);\n    black = gdImageColorAllocate(im, 0, 0, 0);\n    red = gdImageColorAllocate(im, 205, 0, 0);\n    blue = gdImageColorAllocate(im, 0, 56, 168);\n\n    // Background (white)\n    gdImageFilledRectangle(im, 0, 0, WIDTH, HEIGHT , white);\n\n    // Blue Circle (Yin-Yang Symbol)\n    gdImageFilledArc(im, WIDTH / 2, HEIGHT / 2, WIDTH / 3, HEIGHT / 2, 210, 30, red, gdArc);\n\n    // Red Circle (Yin-Yang Symbol)\n    gdImageFilledArc(im, WIDTH / 2, HEIGHT / 2, WIDTH / 3, HEIGHT / 2, 30, 210, blue, gdArc);\n\n  int circleX = 385;    // 圓心的 X 座標\n  int circleY = 262.5;   // 圓心的 Y 座標\n  int circleRadius = 75;     \n\n  // 繪製圓形\n  gdImageFilledEllipse(im, circleX, circleY, circleRadius * 2, circleRadius * 2, red);\n\n  int circleX2 = 515;    // 圓心的 X 座標\n\n int circleY2 = 337.5;\n\n  // 繪製圓形\n  gdImageFilledEllipse(im, circleX2, circleY2, circleRadius * 2, circleRadius * 2, blue);\n\n  {\n\n\n  // 起點和終點位置\n\n  int startX = 340;    \n  // 線的起點 X 座標\n\n  int startY = 90;   \n  // 線的起點 Y 座標\n\n  int endX = 200;     \n  // 線的終點 X 座標\n\n  int endY = 260;     \n  // 線的終點 Y 座標\n\n  int lineWidth = 23;  // 線的寬度\n\n  // 繪製線段\n  gdImageSetThickness(im, lineWidth);\n  gdImageLine(im, startX, startY, endX, endY, black);\n  // 繪製線段\n  gdImageSetThickness(im, lineWidth);\n  gdImageLine(im, startX -35, startY -10, endX -35, endY -10, black);\n\n  // 繪製線段\n  gdImageSetThickness(im, lineWidth);\n  gdImageLine(im, startX -70, startY -20, endX -70, endY -20, black);\n\n  int startX2 = 213;    \n  // 線的起點 X 座標\n\n  int startY2 = 270;   \n  // 線的起點 Y 座標\n\n  int endX2 = 133;     \n  // 線的終點 X 座標\n\n  int endY2 = 210;     \n  // 線的終點 Y 座標\n\n  int lineWidth2 = 25;  // 線的寬度\n\n  // 繪製線段\n  gdImageSetThickness(im, lineWidth);\n  gdImageLine(im, startX2 +3, startY2, endX2 +3, endY2, white);\n\n  gdImageSetThickness(im, lineWidth +10);\ngdImageLine(im, startX2 -17, startY2 +9 , endX2 -17, endY2 +9 , white);\n\n  gdImageSetThickness(im, lineWidth );\ngdImageLine(im, startX2 +115, startY2 -145, endX2 +115, endY2 -145, white);\n\n  gdImageSetThickness(im, lineWidth);\ngdImageLine(im, startX2 +120, startY2 -155, endX2 +120, endY2 -155, white);\n\n  gdImageSetThickness(im, lineWidth +12);\ngdImageLine(im, startX2 +145, startY2 -155, endX2 +145, endY2 -155, white);\n}\n  {\n    // 起點和終點位置\n\n  int startX = 330;    \n  // 線的起點 X 座標\n\n  int startY = 520;   \n  // 線的起點 Y 座標\n\n  int endX = 190;     \n  // 線的終點 X 座標\n\n  int endY = 350;     \n  // 線的終點 Y 座標\n\n  int lineWidth = 23;  // 線的寬度\n\n  // 繪製線段\n  gdImageSetThickness(im, lineWidth);\n  gdImageLine(im, startX, startY, endX, endY, black);\n  // 繪製線段\n  gdImageSetThickness(im, lineWidth);\n  gdImageLine(im, startX -35, startY +10, endX -35, endY +10, black);\n\n  // 繪製線段\n  gdImageSetThickness(im, lineWidth);\n  gdImageLine(im, startX -70, startY +20, endX -70, endY +20, black);\n\n  int startX2 = 213;    \n  // 線的起點 X 座標\n\n  int startY2 = 330;   \n  // 線的起點 Y 座標\n\n  int endX2 = 133;     \n  // 線的終點 X 座標\n\n  int endY2 = 390;     \n  // 線的終點 Y 座標\n\n  int lineWidth2 = 25;  // 線的寬度\n\n  // 繪製線段\n  gdImageSetThickness(im, lineWidth +8);\n  gdImageLine(im, startX2 -11, startY2, endX2 -11, endY2, white);\n\n  gdImageSetThickness(im, lineWidth +10);\ngdImageLine(im, startX2 -30, startY2 -9 , endX2 -30, endY2 -9 , white);\n\n  gdImageSetThickness(im, lineWidth );\ngdImageLine(im, startX2 +100, startY2 +150, endX2 +100, endY2 +150, white);\n\n  gdImageSetThickness(im, lineWidth);\ngdImageLine(im, startX2 +120, startY2 +155, endX2 +120, endY2 +155, white);\n\n  gdImageSetThickness(im, lineWidth +14);\ngdImageLine(im, startX2 +145, startY2 +157, endX2 +145, endY2 +157, white);\n\n    gdImageSetThickness(im, lineWidth -10);\ngdImageLine(im, 232, 426, 206, 448, white);\n\n  }\n\n  {\n    // 起點和終點位置\n\n  int startX = 564;    \n  // 線的起點 X 座標\n\n  int startY = 520;   \n  // 線的起點 Y 座標\n\n  int endX = 704;     \n  // 線的終點 X 座標\n\n  int endY = 350;     \n  // 線的終點 Y 座標\n\n  int lineWidth = 23;  // 線的寬度\n\n  // 繪製線段\n  gdImageSetThickness(im, lineWidth);\n  gdImageLine(im, startX +70, startY +20, endX +70, endY +20, black);\n\n    // 繪製線段\n  gdImageSetThickness(im, lineWidth);\n  gdImageLine(im, startX, startY, endX, endY, black);\n\n    // 繪製線段\n  gdImageSetThickness(im, lineWidth);\n  gdImageLine(im, startX +35, startY +10, endX +35, endY +10, black);\n\ngdImageSetThickness(im, lineWidth -10);\ngdImageLine(im, 624, 400, 734, 490, white);\n\n  int startX2 = 553;    \n  // 線的起點 X 座標\n\n  int startY2 = 330;   \n  // 線的起點 Y 座標\n\n  int endX2 = 633;     \n  // 線的終點 X 座標\n\n  int endY2 = 390;     \n  // 線的終點 Y 座標\n\n  int lineWidth2 = 25;  // 線的寬度\n\n  // 繪製線段\n  gdImageSetThickness(im, lineWidth +8);\n  gdImageLine(im, startX2 +139, startY2, endX2 +139, endY2, white);\n\n  gdImageSetThickness(im, lineWidth +10);\ngdImageLine(im, startX2 +157, startY2 -9 , endX2 +157, endY2 -9 , white);\n\n  gdImageSetThickness(im, lineWidth);\ngdImageLine(im, startX2 +25, startY2 +155, endX2 +25, endY2 +155, white);\n\n  gdImageSetThickness(im, lineWidth +30);\ngdImageLine(im, startX2 -3, startY2 +170, endX2 , endY2 +170, white);\n  }\n  {\n    // 起點和終點位置\n\n  int startX = 330;    \n  // 線的起點 X 座標\n\n  int startY = 520;   \n  // 線的起點 Y 座標\n\n  int endX = 190;     \n  // 線的終點 X 座標\n\n  int endY = 350;     \n  // 線的終點 Y 座標\n\n  int lineWidth = 23;  // 線的寬度\n\n  // 繪製線段\n  gdImageSetThickness(im, lineWidth);\n  gdImageLine(im, startX, startY, endX, endY, black);\n  // 繪製線段\n  gdImageSetThickness(im, lineWidth);\n  gdImageLine(im, startX -35, startY +10, endX -35, endY +10, black);\n\n  // 繪製線段\n  gdImageSetThickness(im, lineWidth);\n  gdImageLine(im, startX -70, startY +20, endX -70, endY +20, black);\n\n  int startX2 = 213;    \n  // 線的起點 X 座標\n\n  int startY2 = 330;   \n  // 線的起點 Y 座標\n\n  int endX2 = 133;     \n  // 線的終點 X 座標\n\n  int endY2 = 390;     \n  // 線的終點 Y 座標\n\n  int lineWidth2 = 25;  // 線的寬度\n\n  // 繪製線段\n  gdImageSetThickness(im, lineWidth +8);\n  gdImageLine(im, startX2 -11, startY2, endX2 -11, endY2, white);\n\n  gdImageSetThickness(im, lineWidth +10);\ngdImageLine(im, startX2 -30, startY2 -9 , endX2 -30, endY2 -9 , white);\n\n  gdImageSetThickness(im, lineWidth );\ngdImageLine(im, startX2 +100, startY2 +150, endX2 +100, endY2 +150, white);\n\n  gdImageSetThickness(im, lineWidth);\ngdImageLine(im, startX2 +120, startY2 +155, endX2 +120, endY2 +155, white);\n\n  gdImageSetThickness(im, lineWidth +14);\ngdImageLine(im, startX2 +145, startY2 +157, endX2 +145, endY2 +157, white);\n\n    gdImageSetThickness(im, lineWidth -10);\ngdImageLine(im, 232, 426, 206, 448, white);\n\n  }\n  {\n    // 起點和終點位置\n\n  int startX = 564;    \n  // 線的起點 X 座標\n\n  int startY = 97;   \n  // 線的起點 Y 座標\n\n  int endX = 704;     \n  // 線的終點 X 座標\n\n  int endY = 267;     \n  // 線的終點 Y 座標\n\n  int lineWidth = 23;  // 線的寬度\n\n  // 繪製線段\n  gdImageSetThickness(im, lineWidth);\n  gdImageLine(im, startX +70, startY -20, endX +70, endY -20, black);\n\n    // 繪製線段\n  gdImageSetThickness(im, lineWidth);\n  gdImageLine(im, startX, startY, endX, endY, black);\n\n    gdImageSetThickness(im, lineWidth -10);\ngdImageLine(im, 624, 212, 734, 118, white);\n\n    // 繪製線段\n  gdImageSetThickness(im, lineWidth);\n  gdImageLine(im, startX +35, startY -10, endX +35, endY -10, black);\n\n  int startX2 = 553;    \n  // 線的起點 X 座標\n\n  int startY2 = 277;   \n  // 線的起點 Y 座標\n\n  int endX2 = 633;     \n  // 線的終點 X 座標\n\n  int endY2 = 217;     \n  // 線的終點 Y 座標\n\n  int lineWidth2 = 25;  // 線的寬度\n\n  // 繪製線段\n  gdImageSetThickness(im, lineWidth +8);\n  gdImageLine(im, startX2 +134, startY2, endX2 +134, endY2, white);\n\n  gdImageSetThickness(im, lineWidth +10);\ngdImageLine(im, startX2 +157, startY2 +9 , endX2 +157, endY2 +9 , white);\n\n  gdImageSetThickness(im, lineWidth);\ngdImageLine(im, startX2 +25, startY2 -155, endX2 +25, endY2 -155, white);\n\n    gdImageSetThickness(im, lineWidth +30);\ngdImageLine(im, startX2 -5, startY2 -155, endX2 -5, endY2 -155, white);\n\n  }\n\n    // Save image\nFILE *outputFile = fopen("./../images/korea_flag.png", "wb");\nif (outputFile == NULL) {\n    fprintf(stderr, "Error opening the output file.\\n");\n    return 1;\n}\n  gdImagePngEx(im, outputFile, 9);\n      fclose(outputFile);\n      gdImageDestroy(im);\n      return 0;\n  } \n \n', 'tags': '', 'url': 'w7.html'}, {'title': 'w11', 'text': '\n #include <stdio.h>\n#include <gd.h>\n#include <math.h>\n\nint main() {\n    int width = 800;\n    int height = 600;\n\n    gdImagePtr img = gdImageCreateTrueColor(width, height);\n    gdImageAlphaBlending(img, 0);\n\n    FILE *outputFile = fopen("hellogd.png", "wb");\n    if (outputFile == NULL) {\n\nfprintf(stderr, "Error opening the output file.\\n");\n\nreturn 1;\n    }\n\n    int red = gdImageColorAllocate(img, 255, 0, 0);\n    int blue = gdImageColorAllocate(img, 0, 0, 255);\n    int black = gdImageColorAllocate(img, 0, 0, 0);\n    int white = gdImageColorAllocate(img, 255, 255, 255);\n    // 長方形塗色\n    gdImageFilledRectangle(img, 0, 0, width, height, white);\n    gdImageFilledRectangle(img, 0, 0, (int)width/4, (int)height/4, blue);\n    // 橢圓形塗色\n    gdImageFilledEllipse(img, (int)width*3/4, (int)height/4, (int)width/4, (int)width/4, red);\n    // 橢圓形畫線\n    gdImageEllipse(img, (int)width*3/4, (int)height*3/4, (int)width/4, (int)width/4, red);\n    // 畫直線\n    gdImageLine(img, (int)width/2, (int)height/2, (int)width/2, (int)height/2 + 100, blue);\n\n    // 多邊形畫線\n    gdPoint points[4];\n    points[0].x = (int)width/4;\n    points[0].y = (int)height*3/4;\n    points[1].x = points[0].x + 100;\n    points[1].y = points[0].y;\n    points[2].x = points[1].x;\n    points[2].y = points[1].y + 100;\n    points[3].x = points[2].x - 100;\n    points[3].y = points[2].y;\n    gdImagePolygon(img, points, 4, black);\n\n    // 多邊形塗色\n    gdPoint points2[4];\n    points2[0].x = (int)width/3;\n    points2[0].y = (int)height/2;\n    points2[1].x = points2[0].x + 100;\n    points2[1].y = points2[0].y;\n    points2[2].x = points2[1].x;\n    points2[2].y = points2[1].y + 100;\n    points2[3].x = points2[2].x - 150;\n    points2[3].y = points2[2].y;\n    gdImageFilledPolygon(img, points2, 4, red);\n\n    gdImagePngEx(img, outputFile, 9);\n    fclose(outputFile);\n    gdImageDestroy(img);\n    return 0;\n} \n \n', 'tags': '', 'url': 'w11.html'}, {'title': 'w13', 'text': '// 包含標準輸出入程式庫的標頭文件\n#include <stdio.h>\n\n// 主函式\nint main() {\n    // Open a file to write displacement and velocity data\n    FILE *outputFile = fopen("motion_data.txt", "w");\n    if (!outputFile) {\n        fprintf(stderr, "Failed to create data file.\\n");\n        return 1;\n    }\n\n    // Simulate motion for 10 seconds and calculate displacement and velocity, while writing data to the file\n    double x = 0.2;  // Initial displacement\n    double v = 0.0;  // Initial velocity\n    double dt = 0.01; // Time step\n    double t = 0.0;  // Time\n\n    while (t <= 10.0) {\n        double acceleration = (-10.0 * x - 0.5 * v) / 1.0; // Modified system parameters here\n        v += acceleration * dt;\n        x += v * dt;\n\n        fprintf(outputFile, "%lf %lf %lf\\n", t, x, v);\n\n        t += dt;\n    }\n\n    // Close the data file\n    fclose(outputFile);\n\n    // Start a Gnuplot process using popen\n    FILE *gnuplotPipe = popen("gnuplot -persistent", "w");\n    if (!gnuplotPipe) {\n        fprintf(stderr, "Failed to start Gnuplot.\\n");\n        return 1;\n    }\n\n    // Use Gnuplot plotting commands, specify font and output as PNG\n    fprintf(gnuplotPipe, "set terminal pngcairo enhanced font \'default,10\' size 800,400\\n");\n    fprintf(gnuplotPipe, "set output \'./../images/motion_plot.png\'\\n");\n    fprintf(gnuplotPipe, "set title \'Displacement and Velocity vs. Time\'\\n");\n    fprintf(gnuplotPipe, "set xlabel \'Time (s)\'\\n");\n    fprintf(gnuplotPipe, "set ylabel \'Displacement (m)\'\\n");\n    fprintf(gnuplotPipe, "plot \'motion_data.txt\' using 1:2 with lines lw 2 title \'Displacement\', \\\n                             \'motion_data.txt\' using 1:3 with lines lw 2 title \'Velocity\'\\n");\n\n    // Close the Gnuplot process\n    fprintf(gnuplotPipe, "exit\\n");\n    pclose(gnuplotPipe);\n\n    return 0;\n} \n \n', 'tags': '', 'url': 'w13.html'}, {'title': 'W15', 'text': '#include <stdio.h>\n#include <gd.h>\n#include <math.h>\n\nvoid draw_roc_flag(gdImagePtr img);\n\nint main() {\n    int width = 1200;\n    int height = (int)(width * 2.0 / 3.0);\n\n    gdImagePtr img = gdImageCreateTrueColor(width, height);\n    gdImageAlphaBlending(img, 0);\n\n    draw_roc_flag(img);\n\n    FILE *outputFile = fopen("roc_flag_in_gd.png", "wb");\n    if (outputFile == NULL) {\n        fprintf(stderr, "Error opening the output file.\\n");\n        return 1;\n    }\n    gdImagePngEx(img, outputFile, 9);\n    fclose(outputFile);\n    gdImageDestroy(img);\n    return 0;\n}\n\nvoid draw_roc_flag(gdImagePtr img) {\n    int width = gdImageSX(img);\n    int height = gdImageSY(img);\n    int red, white, blue;\n    int center_x = (int)(width / 4);\n    int center_y = (int)(height / 4);\n    int sun_radius = (int)(width / 8);\n    int white_circle_dia = sun_radius;\n    int blue_circle_dia = white_circle_dia + white_circle_dia * 2 / 15;\n\n    red = gdImageColorAllocate(img, 255, 0, 0);\n    white = gdImageColorAllocate(img, 255, 255, 255);\n    blue = gdImageColorAllocate(img, 0, 0, 149);\n\n    gdImageFilledRectangle(img, 0, 0, width, height, red);\n    gdImageFilledRectangle(img, 0, 0, (int)(width / 2.0), (int)(height / 2.0), blue);\n\n    // 利用一個藍色大圓與白色小圓畫出藍色環狀\n    gdImageFilledEllipse(img, center_x, center_y, blue_circle_dia, blue_circle_dia, blue);\n    gdImageFilledEllipse(img, center_x, center_y, white_circle_dia, white_circle_dia, white);\n\n    // 不含太陽的部分\n\n    // 連接第二組ABED的白線\n    int ax = 429;\n    int ay = 125;\n    int bx = 279;\n    int by = 165;\n    int ex = 170;\n    int ey = 274;\n    int dx = 170;\n    int dy = 274;\n\n    gdImageLine(img, ax, ay, bx, by, white);\n    gdImageLine(img, bx, by, ex, ey, white);\n    gdImageLine(img, ex, ey, dx, dy, white);\n    gdImageLine(img, dx, dy, ax, ay, white);\n}\n \n \n', 'tags': '', 'url': 'W15.html'}, {'title': 'C_EX', 'text': '1. \n #include <stdio.h> void main() { int a; a = 3; printf("%d\\n", !a ); a = 0; printf("%d\\n", !a ); } \n \n 2. \n #include <stdio.h> void main() { printf("%d\\n", 1 && 3 ); printf("%d\\n", 0 && 0 ); printf("%d\\n", 2 && 2 ); } \n \n 3. \n #include <stdio.h> void main() { printf("%d\\n", 1 || 0 ); printf("%d\\n", 0 || 0 ); printf("%d\\n", 2 || 2 ); } \n \n 4. \n #include <stdio.h> void main() { char a; printf( " The size of int is %d \\n", sizeof(int) ); printf( " The size of char a is %d \\n", sizeof(a) ); } \n \n 5. \n #include <stdio.h> \n int main() {  char ch;  printf("input a char: ");  scanf("%c", &ch);  if (ch == \'a\') {  printf("You pressed \'a\'\\n");  }  return 0; } \n \n 6. \n #include <stdio.h> \n int main() { char ch; // 宣告一個字符型變數 ch \n // 提示用戶輸入一個字符 printf("輸入一個字符："); \n // 檢查 scanf 的返回值，確保成功讀取了一個字符 if (scanf("%c", &ch) != 1) { fprintf(stderr, "錯誤：無法讀取字符。\\n"); return 1; // 返回錯誤碼 } \n // 檢查輸入的字符是否為 \'a\' if (ch == \'a\') { printf("你輸入的是 \'a\'\\n"); // 如果是 \'a\'，則印出相應的消息 } else { printf("你輸入的不是 \'a\'\\n"); // 如果不是 \'a\'，則印出相應的消息 } \n return 0; } \n \n 7. \n #include <stdio.h> \n int main() { int i; // 宣告一個整數變數 i \n // 提示用戶輸入一個整數 printf("輸入一個整數："); \n // 檢查 scanf 的返回值，確保成功讀取了一個整數 if (scanf("%d", &i) != 1) { fprintf(stderr, "錯誤：無法讀取整數。\\n"); return 1; // 返回錯誤碼 } \n // 根據 i 的值進行不同的判斷 if (i < 100) { printf("i < 100\\n"); } else { if ((i >= 100) && (i < 200)) { printf("i >= 100 and i < 200\\n"); } else { printf("i >= 200\\n"); } } \n return 0; } \n \n 8. \n #include <stdio.h> \n int main() { char c; // 宣告一個字符型變數 c \n // 提示用戶輸入一個字符 printf("輸入一個字符："); \n // 檢查 scanf 的返回值，確保成功讀取了一個字符 if (scanf(" %c", &c) != 1) { fprintf(stderr, "錯誤：無法讀取字符。\\n"); return 1; // 返回錯誤碼 } \n // 使用 switch 陳述式根據讀取的字符執行相應的分支 switch(c) { case \'a\': printf("你按下了 \'a\'\\n"); break; case \'b\': printf("你按下了 \'b\'\\n"); break; case \'c\': printf("你按下了 \'c\'\\n"); break; default: printf("不是 \'a\'、\'b\' 或 \'c\'\\n"); break; } \n return 0; } \n \n 9. \n #include <stdio.h> \n int main() { char c; // 宣告一個字符型變數 c \n // 提示用戶輸入一個字符 printf("輸入一個字符："); \n // 檢查 scanf 的返回值，確保成功讀取了一個字符 if (scanf(" %c", &c) != 1) { fprintf(stderr, "錯誤：無法讀取字符。\\n"); return 1; // 返回錯誤碼 } \n // 使用 switch 陳述式根據讀取的字符執行相應的分支 switch(c) { case \'a\': printf("你按下了 \'a\'\\n"); break; case \'b\': printf("你按下了 \'b\'\\n"); break; case \'c\': printf("你按下了 \'c\'\\n"); break; default: printf("不是 \'a\'、\'b\' 或 \'c\'\\n"); break; } \n return 0; } \n \n 10. \n #include<stdio.h> \n void main() { int i; for (i = 0; i < 6; i++) { printf("%d\\n", i); /* 印出 i */ } } \n \n', 'tags': '', 'url': 'C_EX.html'}, {'title': 'ansic', 'text': '1. \n int main() {  int x; // Declare variable x \n // Print header for the table  printf("x+1\\tx+3\\tx+5\\tx+7\\n\\n");  printf("---------------------------\\n"); \n // Loop to generate and print table values  for (x = 1; x <= 15; x += 3)  printf("%d\\t%d\\t%d\\t%d\\n", x, (x + 2), (x + 4), (x + 6)); \n return 0; // Indicate successful program execution } \n \n 2. \n #include <stdio.h> \n int main() {  int a, b; \n // Prompt user for input  printf("Input two pairs values (integer values):\\n"); \n // Read two integer values from user and store them in \'a\' and \'b\'  if (scanf("%d %d", &a, &b) != 2) {  fprintf(stderr, "Error: Invalid input. Please enter two integer values.\\n");  return 1; // Return an error code for invalid input  } \n // Check if \'a\' is not equal to \'b\'  if (a != b) {  // Check if \'b\' is greater than \'a\'  if (b > a) {  printf("Ascending order\\n"); // Print message for ascending order  } else {  printf("Descending order\\n"); // Print message for descending order  }  } \n return 0; // End of program } \n \n 3. \n #include <stdio.h> \n int main() {  int j, numbers[5], total = 0; // 宣告數組用於存儲 5 個數字和變數用於總和 \n // 提示用戶輸入五個數字並存入數組  for (j = 0; j < 5; j++) {  printf("\\nInput the %s number: ", j == 0 ? "first" : (j == 1 ? "second" : (j == 2 ? "third" : (j == 3 ? "fourth" : "fifth"))));  if (scanf("%d", &numbers[j]) != 1) {  fprintf(stderr, "Error: Invalid input for the %s number.\\n", j == 0 ? "first" : (j == 1 ? "second" : (j == 2 ? "third" : (j == 3 ? "fourth" : "fifth"))));  return 1;  }  } \n for (j = 0; j < 5; j++) {  if ((numbers[j] % 2) != 0) // 檢查數字是否為奇數  {  total += numbers[j]; // 將奇數添加到總和中  }  } \n printf("\\nSum of all odd values: %d", total); // 輸出所有奇數的總和  return 0; } \n \n 4. \n #include <stdio.h> \n int main() { int x, y; int result_x, result_y; // 用於儲存 scanf 的返回值 \n // 獲取第一個整數 printf("輸入第一個整數："); result_x = scanf("%d", &x); if (result_x != 1) { printf("錯誤：請輸入整數。\\n"); return 1; } \n // 獲取第二個整數 printf("輸入第二個整數："); result_y = scanf("%d", &y); if (result_y != 1) { printf("錯誤：請輸入整數。\\n"); return 1; } \n // 計算並輸出它們的乘積 printf("這兩個整數的乘積 = %d\\n", x * y); \n return 0; } \n \n 5. \n #include <stdio.h> \n int main() { int a = 125, b = 12345; /* 宣告並初始化整數變數 */ long ax = 1234567890; /* 宣告並初始化長整數變數 */ short s = 4043; /* 宣告並初始化短整數變數 */ float x = 2.13459; /* 宣告並初始化浮點數變數 */ double dx = 1.1415927; /* 宣告並初始化雙精度浮點數變數 */ char c = \'W\'; /* 宣告並初始化字符變數 */ unsigned long ux = 2541567890; /* 宣告並初始化無符號長整數變數 */ \n /* 各種算術運算和類型轉換 */ printf("a + c = %d\\n", a + c); printf("x + c = %f\\n", x + c); printf("dx + x = %f\\n", dx + x); printf("((int) dx) + ax = %ld\\n", ((int) dx) + ax); printf("a + x = %f\\n", a + x); printf("s + b = %d\\n", s + b); printf("ax + b = %ld\\n", ax + b); printf("s + c = %hd\\n", s + c); printf("ax + c = %ld\\n", ax + c); printf("ax + ux = %lu\\n", ax + ux); \n return 0; } \n \n 6. \n #include <stdio.h> \n int main(void) {  unsigned char char1, char2, char3, char4, char5, char6, char7, char8; \n // Print table header  printf("|---------------------------------------------------------------------------------------------------------|\\n");  printf("|extended ASCII table - excluding control characters |\\n");  printf("| Ch Dec Hex | Ch Dec Hex | Ch Dec Hex | Ch Dec Hex | Ch Dec Hex | Ch Dec Hex | Ch Dec Hex |\\n");  printf("|----------------|----------------|-------------|--------------|--------------|-------------|-------------|\\n"); \n // Loop through characters  for (int i = 0; i < 32; i++) {  // Calculate characters for different ranges  char1 = i;  char2 = i + 32;  char3 = i + 64;  char4 = i + 96;  char5 = i + 128; // extended ASCII characters  char6 = i + 160;  char7 = i + 192;  char8 = i + 224; \n // Print characters and their decimal and hexadecimal representations  printf("| %c %3d %#x ", char2, char2, char2);  printf("| %c %3d %#x ", char3, char3, char3); \n // Special case for DEL character  if (char4 == 127) {  printf("|%s %3d %#x |", "DEL", char4, char4);  } else {  printf("| %c %3d %#x |", char4, char4, char4);  } \n // Print extended ASCII characters for the current system.  printf(" %c %3d %#x | %c %3d %#x | %c %3d %#x | %c %3d %#x |\\n",  char5, char5, char5,  char6, char6, char6,  char7, char7, char7,  char8, char8, char8);  } \n return 0; // Indicate successful execution of the program } \n \n 7. \n #include <stdio.h> \n int main() {  int x; // 用於存儲總里程的變數，以公里為單位  float y; // 用於存儲總耗油量的變數，以升為單位 \n // 提示用戶輸入總里程並存入 \'x\'  printf("Input total distance in km: ");  // 檢查 scanf 的返回值，確保成功讀取一個整數  if (scanf("%d", &x) != 1) {  fprintf(stderr, "Error: Invalid input for total distance.\\n");  return 1;  } \n // 提示用戶輸入總耗油量並存入 \'y\'  printf("Input total fuel spent in liters: ");  // 檢查 scanf 的返回值，確保成功讀取一個浮點數  if (scanf("%f", &y) != 1) {  fprintf(stderr, "Error: Invalid input for total fuel spent.\\n");  return 1;  } \n // 計算並打印平均油耗  printf("Average consumption (km/lt) %.3f ", x / y);  printf("\\n"); \n return 0; } \n \n 8. \n #include <stdio.h> \n int main() {  // 声明变量  float principal_amt, rate_of_interest, days, interest;  const int yearInDays = 365; // 用于转换利率的常量 \n // 提示用户输入贷款金额  printf("输入贷款金额 (输入 0 退出): ");  if (scanf("%f", &principal_amt) != 1) {  fprintf(stderr, "Error: Invalid input for loan amount.\\n");  return 1;  } \n // 主循环用于处理贷款  while ((int)principal_amt != 0)   {  // 提示用户输入利率  printf("输入利率: ");  if (scanf("%f", &rate_of_interest) != 1) {  fprintf(stderr, "Error: Invalid input for interest rate.\\n");  return 1;  } \n // 提示用户输入贷款期限（天）  printf("输入贷款期限（天）: ");  if (scanf("%f", &days) != 1) {  fprintf(stderr, "Error: Invalid input for loan term.\\n");  return 1;  } \n // 计算利息  interest = (principal_amt * rate_of_interest * days) / yearInDays; \n // 显示利息金额  printf("利息金额为 $%.2f\\n", interest); \n // 提示用户输入下一个贷款金额  printf("\\n\\n输入贷款金额 (输入 0 退出): ");  if (scanf("%f", &principal_amt) != 1) {  fprintf(stderr, "Error: Invalid input for loan amount.\\n");  return 1;  }  } \n return 0; } \n \n 9. \n #include <stdio.h> #include <stdlib.h> #include <limits.h> \n int divide_two(int dividend_num, int divisor_num) {  int sign = (float)dividend_num / divisor_num > 0 ? 1 : -1;  unsigned int dvd = dividend_num > 0 ? dividend_num : -dividend_num;  unsigned int dvs = divisor_num > 0 ? divisor_num : -divisor_num;  unsigned int bit_num[33];  unsigned int i = 0;  long long d = dvs; \n bit_num[i] = d;  while (d <= dvd) {  bit_num[++i] = d = d << 1;  }  i--; \n unsigned int result = 0;  while (dvd >= dvs) {  if (dvd >= bit_num[i]) {  dvd -= bit_num[i];  result += (1 << i);  } else {  i--;  }  } \n if (result > INT_MAX && sign > 0) {  return INT_MAX;  }  return (int)result * sign; } \n int main(void) {  int dividend_num = 15;  int divisor_num = 3;  printf("Quotient after dividing %d and %d: %d", dividend_num, divisor_num, divide_two(dividend_num, divisor_num));  return 0; } \n \n 10. \n #include <stdio.h> \n int main() { char id[10]; // 用於存儲員工ID的變數（最多10個字符） int hour; // 用於存儲工作時數的變數 double value, salary; // 用於每小時薪資和總薪資的變數 \n // 提示使用者輸入員工ID printf("輸入員工ID（最多10個字符）："); \n // 檢查scanf的返回值 if (scanf("%9s", id) != 1) { fprintf(stderr, "錯誤：無法讀取員工ID。\\n"); return 1; // 返回錯誤碼 } \n // 提示使用者輸入工作時數 printf("\\n輸入工作時數："); \n // 檢查scanf的返回值 if (scanf("%d", &hour) != 1) { fprintf(stderr, "錯誤：無法讀取工作時數。\\n"); return 1; // 返回錯誤碼 } \n // 提示使用者輸入每小時薪資 printf("\\n每小時薪資："); \n // 檢查scanf的返回值 if (scanf("%lf", &value) != 1) { fprintf(stderr, "錯誤：無法讀取每小時薪資。\\n"); return 1; // 返回錯誤碼 } \n // 計算總薪資 salary = value * hour; \n // 印出員工ID和薪資 printf("\\n員工ID = %s\\n薪資 = U$ %.2lf\\n", id, salary); \n return 0; } \n \n', 'tags': '', 'url': 'ansic.html'}, {'title': '期末總結', 'text': 'A: 是否按照進度明確標示倉儲的改版歷程:有的，我有跟著影片一步一步做。 \n \n \n \n \n B: 是否根據 IPv4 與 IPv6 網路環境設定進行作法討論：有的，我有跟著老師的影片做，也了解如何設定網路。 \n \n \n C: 是否就 Replit、s.cycu.org 與 localhost 情境下對個人與分組倉儲進行設定操作。我有跟著老師給的網站做，也有做分組的Replit \n \n \n E: 是否完成\xa0w2-w5\xa0週任務中的 Exercises:有完成，並且有看影片。 \n \n \n F: 是否完成 w6-w7 週任務中的練習一與練習二 \n \n \n \n G: 是否完成 C 結合 gd 繪圖程式庫, 畫出 PROC(規格), United Kingdom(規格), Japan(規格)與 South Korea(規格) Flags \n \n \n', 'tags': '', 'url': '期末總結.html'}, {'title': 'W16', 'text': '\n #include <stdio.h>\n\n// System parameters\n#define M1 2.0\n#define M2 3.0\n#define K1 0.5\n#define K2 1.0\n#define K3 15.0\n#define C1 0.25\n#define C2 0.33\n#define C3 0.5\n\n// Function to calculate the derivative of the state\nvoid calculate_derivative(double t, double state[4], double derivative[4]) {\n    derivative[0] = state[2];  // dx1/dt = v1\n    derivative[1] = state[3];  // dx2/dt = v2\n\n    double delta_x = state[0] - state[1];\n\n    // dv1/dt\n    derivative[2] = -(K1 * state[0] + K2 * delta_x) / M1;\n\n    // dv2/dt\n    derivative[3] = -(K3 * state[1] - K2 * delta_x) / M2;\n}\n\n// Euler\'s Method for solving the system\nvoid euler_method(double t_initial, double t_final, double dt, double initial_conditions[4]) {\n    FILE *output_file;\n    output_file = fopen("trajectory_data.txt", "w");\n\n    double t = t_initial;\n    double state[4];\n    for (int i = 0; i < 4; ++i) {\n        state[i] = initial_conditions[i];\n    }\n\n    while (t <= t_final) {\n        fprintf(output_file, "%f %f %f %f %f\\n", t, state[0], state[1], state[2], state[3]);\n\n        double derivative[4];\n        calculate_derivative(t, state, derivative);\n\n        for (int i = 0; i < 4; ++i) {\n            state[i] += derivative[i] * dt;\n        }\n\n        t += dt;\n    }\n\n    fclose(output_file);\n}\n\nint main() {\n    // Define the initial conditions\n    double initial_conditions[4] = {1.0, -0.5, 0.0, 0.0};  // x1, x2, v1, v2\n\n    // Time parameters\n    double t_initial = 0.0;\n    double t_final = 10.0;\n    double dt = 0.01;\n\n    // Solve the system using Euler\'s Method\n    euler_method(t_initial, t_final, dt, initial_conditions);\n\n    return 0;\n} \n \n \n \n \n \n \n \n', 'tags': '', 'url': 'W16.html'}, {'title': 'Brython', 'text': 'https://en.wikipedia.org/wiki/Python_(programming_language) \n Examples: \n https://gist.github.com/mdecycu/d9082d678096bd58378d6afe2c7fa05d \n https://www.geeksforgeeks.org/python-programming-examples/ \n https://www.programiz.com/python-programming/examples \n https://www.freecodecamp.org/news/python-code-examples-sample-script-coding-tutorial-for-beginners/ \n Python Tutorial: \n https://docs.python.org/3/tutorial/ \n An informal introduction to Python \n Indentation (Python 採 4 個 Spaces 縮排, 以界定執行範圍) \n Variables ( Python Keywords ) \n Comments (# 單行註解, 三個單引號或三個雙引號標註多行註解) \n Numbers  (整數 int(), 浮點數 float()) \n Strings  (字串) \n print (Python 內建函式,  print()  函式) \n Python control flow tools \n for \n if \n range \n open \n read \n lists \n tuples \n dictionaries \n functions \n try ... except \n break \n pass \n classes \n 這個頁面 demo 如何在同一頁面下納入多個線上 Ace 編輯器與執行按鈕 ( practice_html.txt  動態頁面超文件). \n practice_html.txt  動態頁面超文件應該可以在啟動 Brython 時, 設定將 .py 檔案放入 downloads/py 目錄中引用. \n 亦即將所有對應的 html 也使用 Brython 產生, 然後寫為  class  後, 在範例導入時透過  instance  引用. \n <!-- 啟動 Brython -->\n<script>\nwindow.onload=function(){\nbrython({debug:1, pythonpath:[\'./../cmsimde/static/\',\'./../downloads/py/\']});\n}\n</script> \n 從 1 累加到 100: \n 1 add to 100 \n 將 iterable 與 iterator  相關說明 , 利用 Brython 與 Ace Editor 整理在這個頁面. \n  導入 brython 程式庫  \n \n \n \n \n  啟動 Brython  \n \n \n \n  導入 FileSaver 與 filereader  \n \n \n \n \n  導入 ace  \n \n \n \n \n \n \n  導入 gearUtils-0.9.js Cango 齒輪繪圖程式庫  \n \n \n \n \n \n \n  請注意, 這裡使用 Javascript 將 localStorage["kw_py_src1"] 中存在近端瀏覽器的程式碼, 由使用者決定存檔名稱 \n \n \n \n \n \n \n  add 1 to 100 開始  \n \n \n  add 1 to 100 結束 \n  editor1 開始  \n  用來顯示程式碼的 editor 區域  \n \n  以下的表單與按鈕與前面的 Javascript doSave 函式以及 FileSaver.min.js 互相配合  \n  存擋表單開始  \n Filename:  .py   \n  存擋表單結束  \n \n  執行與清除按鈕開始  \n Run   Output   清除輸出區 清除繪圖區 Reload \n  執行與清除按鈕結束  \n \n  程式執行 ouput 區  \n \n  Brython 程式執行的結果, 都以 brython_div1 作為切入位置  \n \n  editor1 結束   ##########################################  \n 從 1 累加到 100 part2: \n 1 add to 100 cango_three_gears BSnake AI Tetris Rotating Block \n  請注意, 這裡使用 Javascript 將 localStorage["kw_py_src2"] 中存在近端瀏覽器的程式碼, 由使用者決定存檔名稱 \n \n \n \n  add 1 to 100 part2 開始  \n \n \n  add 1 to 100 part2 結束 \n  editor2 開始  \n  用來顯示程式碼的 editor 區域  \n \n  以下的表單與按鈕與前面的 Javascript doSave 函式以及 FileSaver.min.js 互相配合  \n  存擋表單開始  \n Filename:  .py   \n  存擋表單結束  \n \n  執行與清除按鈕開始  \n Run   Output   清除輸出區 清除繪圖區 Reload \n  執行與清除按鈕結束  \n \n  程式執行 ouput 區  \n \n  Brython 程式執行的結果, 都以 brython_div1 作為切入位置  \n \n  editor2 結束  \n \n \n', 'tags': '', 'url': 'Brython.html'}]};