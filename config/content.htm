<h1>About</h1>
<p><a href="https://github.com/mdecycu/cmsite"> https://github.com/mdecycu/cmsite</a></p>
<h1>w5</h1>
<pre class="brush:cpp;auto-links:false;toolbar:false" contenteditable="false">// 包含標準輸出入程式庫的標頭文件
// https://blog.csdn.net/weixin_38468077/article/details/101069365
// http://www.gnuplot.info/demo/
// https://github.com/sysprog21/rv32emu
// https://github.com/sysprog21/semu 
// https://docs.google.com/presentation/d/14N0cWG2SnBSqhc2cLF0_2VerB9FF8JN3
// https://cs61c.org/fa23/
// https://greenteapress.com/wp/think-python-2e/
// https://github.com/ecalvadi/c99-examples
// https://github.com/gouravthakur39/beginners-C-program-examples
// https://github.com/ergenekonyigit/Numerical-Analysis-Examples
// https://www.che.ncku.edu.tw/facultyweb/changct/html/teaching/CPPandMATLAB/Past/pdf%20Files/Chap02-Ling.pdf
// https://gteceducation.com.sg/Brochures/PROGRAMMING/C%20PROGRAMMING%20FULL.pdf
// https://jsommers.github.io/cbook/cbook.pdf
// https://jsommers.github.io/cbook/index.html
// http://student.itee.uq.edu.au/courses/csse2310/CProgrammingNotes.pdf
// http://cslibrary.stanford.edu/101/EssentialC.pdf
// https://publications.gbdirect.co.uk/c_book/
// https://www.fossil-scm.org/fossil-book/doc/2ndEdition/fossilbook.pdf
// ***** execute on replit 
// cd downloads
// cc gnuplot_ex1.c -o gnuplot_ex1
// ./gnuplot_ex1
#include &lt;stdio.h&gt;
  
// 主函式
int main() {
    // Start a Gnuplot process using popen
    FILE *gnuplotPipe = popen("gnuplot -persistent", "w");
    if (!gnuplotPipe) {
        fprintf(stderr, "Failed to start Gnuplot.\n");
        return 1;
    }
  
    // Use Gnuplot plotting commands, specify font and output as PNG
    fprintf(gnuplotPipe, "set terminal png font 'default,10' size 800,400\n");
    fprintf(gnuplotPipe, "set output './../images/gnuplot_ex1.png'\n");
    fprintf(gnuplotPipe, "plot sin(x)");
    // Close popen
    pclose(gnuplotPipe);
  
    return 0;
}</pre>
<p>clear</p>
<p>cd downloads</p>
<p>cc gnuplot_ex1.c</p>
<p>./a.out</p>
<p><img alt="" height="200" src="/images/gnuplot_ex1.png" width="400"/></p>
<h1>w6</h1>
<pre class="brush:cpp;auto-links:false;toolbar:false" contenteditable="false">#include &lt;stdio.h&gt;
#include &lt;gd.h&gt;
#include &lt;math.h&gt;

void draw_roc_flag(gdImagePtr img);
void draw_white_sun(gdImagePtr img, int center_x, int center_y, int sun_radius, int white, int red, int blue);

int main() {
    // width 3: height 2
    int width = 1200;
    int height = (int)(width*2.0 / 3.0);

    gdImagePtr img = gdImageCreateTrueColor(width, height);
    gdImageAlphaBlending(img, 0);

    draw_roc_flag(img);

    FILE *outputFile = fopen("./roc_flag.png", "wb");
    if (outputFile == NULL) {
        fprintf(stderr, "Error opening the output file.\n");
        return 1;
    }
    gdImagePngEx(img, outputFile, 9);
    fclose(outputFile);
    gdImageDestroy(img);
    return 0;
}

void draw_roc_flag(gdImagePtr img) {
    int width = gdImageSX(img);
    int height = gdImageSY(img);
    int red, white, blue;
    int center_x = (int)(width/4);
    int center_y = (int)(height/4);
    int sun_radius = (int)(width/8);

    // Colors for the flag
    red = gdImageColorAllocate(img, 242, 0, 0); // Red color
    white = gdImageColorAllocate(img, 255, 255, 255); // White stripes
    blue = gdImageColorAllocate(img, 0, 41, 204); // Blue

    // 繪製紅色矩形區域
    gdImageFilledRectangle(img, 0, 0, width, height, red);

    // 繪製藍色矩形區域
    gdImageFilledRectangle(img, 0, 0, (int)(width/2.0), (int)(height/2.0), blue);

    // 繪製太陽
    draw_white_sun(img, center_x, center_y, sun_radius, white, red, blue);
}
void draw_white_sun(gdImagePtr img, int center_x, int center_y, int sun_radius, int white, int red, int blue) {
    float angle = 0;
    int numRays = 12; // 光芒的數量

    gdPoint points[3]; // 三個頂點的陣列

    for (int i = 0; i &lt; numRays; i++) {
        angle = i * (2 * M_PI / numRays);
        float x1 = center_x + cos(angle) * sun_radius;
        float y1 = center_y + sin(angle) * sun_radius;

        // 調整兩個底邊頂點的位置
      float x2 = center_x + cos(angle + 0.35) * (sun_radius * 0.5);
      float y2 = center_y + sin(angle + 0.35) * (sun_radius * 0.5);
      float x3 = center_x + cos(angle - 0.35) * (sun_radius * 0.5);
      float y3 = center_y + sin(angle - 0.35) * (sun_radius * 0.5);

        // 設定多邊形的三個頂點
        points[0].x = (int)x1;
        points[0].y = (int)y1;
        points[1].x = (int)x2;
        points[1].y = (int)y2;
        points[2].x = (int)x3;
        points[2].y = (int)y3;

        gdImageFilledPolygon(img, points, 3, white);
    }
  //外圈
  gdImageFilledEllipse(img, center_x, center_y, sun_radius * 1.2, sun_radius * 1.2, blue);
  
    // 繪製太陽內部
    gdImageFilledEllipse(img, center_x, center_y, sun_radius * 1.1, sun_radius * 1.1, white);
}</pre>
<p><img alt="" height="400" src="/images/roc_flag.png" width="600"/></p>
<p>clear</p>
<p>cd downloads</p>
<p>cc gd_roc_flag.c -lgd -lm</p>
<p>./a.out </p>
<pre class="brush:cpp;auto-links:false;toolbar:false" contenteditable="false">#include &lt;stdio.h&gt;
#include &lt;gd.h&gt;
#include &lt;math.h&gt;

void draw_usa_flag(gdImagePtr img);
void draw_star(gdImagePtr img, int x, int y, int size, int color, double rotation_angle);

int main() {
    int width = 800;
    int height = (int)(width / 1.9);

    gdImagePtr img = gdImageCreateTrueColor(width, height);
    gdImageAlphaBlending(img, 0);

    draw_usa_flag(img);

    FILE *outputFile = fopen("./../images/usa_flag.png", "wb");
    if (outputFile == NULL) {
        fprintf(stderr, "打开输出文件时出错。\n");
        return 1;
    }

    gdImagePngEx(img, outputFile, 9);
    fclose(outputFile);
    gdImageDestroy(img);

    return 0;
}

void draw_usa_flag(gdImagePtr img) {
    int width = gdImageSX(img);
    int height = gdImageSY(img);
    int red, white, blue;
    // 国旗颜色
    red = gdImageColorAllocate(img, 178, 34, 52); // 红色条纹
    white = gdImageColorAllocate(img, 255, 255, 255); // 白色条纹
    blue = gdImageColorAllocate(img, 60, 59, 110); // 蓝色矩形

    int stripe_height = height / 13;
    int stripe_width = width;
    int star_size = (int)(0.0308 * height); // 星星大小

    for (int y = 0; y &lt; height; y += stripe_height) {
        if (y / stripe_height % 2 == 0) {
            gdImageFilledRectangle(img, 0, y, stripe_width, y + stripe_height, red);
        } else {
            gdImageFilledRectangle(img, 0, y, stripe_width, y + stripe_height, white);
        }
    }

    gdImageFilledRectangle(img, 0, 0, width * 2 / 5, stripe_height * 7, blue);

    int star_spacing_x = (int)(0.129 * height); // 横向星星之间的间距
    int star_spacing_y = (int)(0.054 * height); // 纵向星星之间的间距
    int star_start_x = (int)(0.125 * height); // 星星的起始X位置
    int star_start_y = (int)(0.0485 * height); // 星星的起始Y位置

    for (int row = 0; row &lt; 9; row++) {
        int starsPerRow = (row % 2 == 0) ? 6 : 5;

        // 计算2、4、6和8排星星的偏移量
        int offset_x = (row % 2 == 0) ? star_spacing_x / -2 : 0;

        for (int star = 0; star &lt; starsPerRow; star++) {
            int x = star_start_x + star * star_spacing_x + offset_x;

            // 旋转角度（以弧度为单位）
            double rotation_angle = M_PI / 5; // 忘記多少度的旋转

            int y = star_start_y + row * star_spacing_y;
            draw_star(img, x, y, star_size, white, rotation_angle);
        }
    }
}

void draw_star(gdImagePtr img, int x, int y, int size, int color, double rotation_angle) {
    gdPoint points[10];

    for (int i = 0; i &lt; 10; i++) {
        double angle = M_PI / 2 + i * 2 * M_PI / 10 + rotation_angle;
        int radius = (i % 2 == 0) ? size : size / 2;
        points[i].x = x + radius * cos(angle);
        points[i].y = y + radius * sin(angle);
    }

    // 用指定的颜色填充星星
    gdImageFilledPolygon(img, points, 10, color);
}</pre>
<p><img alt="" height="400" src="/images/usa_flag.png" width="760"/></p>
<p>clear</p>
<p>cd downloads</p>
<p>cc gd_usa_flag.c -lgd -lm</p>
<p>./a.out </p>
<h1>w7</h1>
<pre class="brush:cpp;auto-links:false;toolbar:false" contenteditable="false">#include &lt;stdio.h&gt;
#include &lt;gd.h&gt;
#include &lt;math.h&gt;

void draw_uk_flag(gdImagePtr img);
void fillTriangle(gdImagePtr img, int x1, int y1, int x2, int y2, int x3, int y3, int color);

int main() {
// 设置国旗的宽和高
int width = 1200;
int height = width / 2;

// 创建图像
gdImagePtr img = gdImageCreateTrueColor(width, height);
gdImageAlphaBlending(img, 0);

// 绘制英国国旗
draw_uk_flag(img);

// 将图像保存到文件
FILE *outputFile = fopen("./../images/uk_flag.png", "wb");
if (outputFile == NULL) {
fprintf(stderr, "打开输出文件时发生错误。\n");
return 1;
}
gdImagePngEx(img, outputFile, 9);
fclose(outputFile);
gdImageDestroy(img);
return 0;
}



void draw_uk_flag(gdImagePtr img) {
int width = gdImageSX(img);
int height = gdImageSY(img);

int red, white, blue;
red = gdImageColorAllocate(img, 204, 0, 0); // 红色
white = gdImageColorAllocate(img, 255, 255, 255); // 白色
blue = gdImageColorAllocate(img, 0, 0, 153); // 蓝色

gdImageFilledRectangle(img, 0, 0, width, height, blue);


int x1, y1, x2, y2, x3, y3;
{
int line_thickness = 100;
gdImageSetThickness(img, line_thickness);

int x1, y1, x2, y2, x3, y3;

// 绘制白色斜线
x1 = 0;
y1 = 600;
x2 = 1200;
y2 = 0;
gdImageLine(img, x1, y1, x2, y2, white);

x1 = 0;
y1 = 0;
x2 = 1200;
y2 = 600;
gdImageLine(img, x1, y1, x2, y2, white);
}
{
int line_thickness = 33;
gdImageSetThickness(img, line_thickness);


// 绘制红色斜线
x1 = 566;
y1 = 300;
x2 = 1166;
y2 = 0;
gdImageLine(img, x1, y1, x2, y2, red);

x1 = 1233;
y1 = 600;
x2 = 633;
y2 = 300;
gdImageLine(img, x1, y1, x2, y2, red);

x1 = 566;
y1 = 300;
x2 = -33;
y2 = 0;
gdImageLine(img, x1, y1, x2, y2, red);

x1 = 600;
y1 = 316.5;
x2 = 0;
y2 = 616.5;
gdImageLine(img, x1, y1, x2, y2, red);
}
{
int line_thickness = 33;
gdImageSetThickness(img, line_thickness);

int x1, y1, x2, y2, x3, y3;

// 绘制 斜线
x1 = 0;
y1 = 600;
x2 = 1200;
y2 = 0;
gdImageLine(img, x1, y1, x2, y2, red );


x1 = 1200;
y1 = 16.5;
x2 = 600;
y2 = 316.5;
gdImageLine(img, x1, y1, x2, y2, white);


x1 = 0;
y1 = 583.5;
x2 = 600;
y2 = 283.5;
gdImageLine(img, x1, y1, x2, y2, white);


}

// 绘制白色十字
int cross_width = width / 32;
int cross_arm_width = width / 32;
int center_x = width / 2;
int center_y = height / 2;

gdImageFilledRectangle(img, center_x + 2.7 * cross_width, 0, center_x - 2.7 * cross_width, height, white);
gdImageFilledRectangle(img, 0, center_y + 2.7 * cross_arm_width, width, center_y - 2.7 * cross_arm_width, white);

// 绘制红色十字
gdImageFilledRectangle(img, center_x + 1.5 * cross_width, 0, center_x - 1.5 * cross_width, height, red);
gdImageFilledRectangle(img, 0, center_y + 1.5 * cross_arm_width, width, center_y - 1.5 * cross_arm_width, red);
}</pre>
<p></p>
<p><img alt="" height="200" src="/images/uk_flag.png" width="400"/></p>
<pre class="brush:cpp;auto-links:false;toolbar:false" contenteditable="false">#include &lt;stdio.h&gt;
#include &lt;gd.h&gt;
#include &lt;math.h&gt;

void draw_japan_flag(gdImagePtr img);
void draw_white_sun(gdImagePtr img, int center_x, int center_y, int sun_radius, int white, int red );

int main() {
// width 3: height 2
int width = 1200;
int height = 2 * width / 3;

gdImagePtr img = gdImageCreateTrueColor(width, height);
gdImageAlphaBlending(img, 0);

draw_japan_flag(img);

FILE *outputFile = fopen("./../images/japan_flag.png", "wb");
if (outputFile == NULL) {
fprintf(stderr, "Error opening the output file.\n");
return 1;
}
gdImagePngEx(img, outputFile, 9);
fclose(outputFile);
gdImageDestroy(img);
return 0;
}

void draw_japan_flag(gdImagePtr img) {
int width = gdImageSX(img);
int height = gdImageSY(img);
int red, white ;
int center_x = 0.5 * width;
int center_y = 0.5 * height;
int sun_radius = 145 ;

// Colors for the flag
red = gdImageColorAllocate(img, 242, 0, 0); // Red color
white = gdImageColorAllocate(img, 255, 255, 255); // White stripes


// 繪製白色矩形區域
gdImageFilledRectangle(img, 0, 0, width, height, white);


// 繪製太陽內部
gdImageFilledEllipse(img, center_x, center_y, sun_radius * 3, sun_radius * 3, red);
}</pre>
<p></p>
<p><img alt="" height="267" src="/images/japan_flag.png" width="400"/></p>
<pre class="brush:cpp;auto-links:false;toolbar:false" contenteditable="false">#include &lt;stdio.h&gt;
#include &lt;gd.h&gt;
#include &lt;math.h&gt;

void draw_chinese_flag(gdImagePtr img);

int main() {
int width = 300; // 國旗寬度
int height = 200; // 國旗高度

gdImagePtr im = gdImageCreateTrueColor(width, height);
gdImageAlphaBlending(im, 0);

draw_chinese_flag(im);

FILE *outputFile = fopen("./../images/proc_flag.png", "wb");
if (outputFile == NULL) {
fprintf(stderr, "打开输出文件时出错。\n");
return 1;
}

gdImagePngEx(im, outputFile, 9);
fclose(outputFile);
gdImageDestroy(im);

return 0;
}

// 声明 draw_star 函数
void draw_star(gdImagePtr img, int x, int y, int size, int color, double rotation_angle);

void draw_chinese_flag(gdImagePtr img) {
int width = gdImageSX(img);
int height = gdImageSY(img);
int red, yellow;

// 國旗顏色
red = gdImageColorAllocate(img, 255, 0, 0); // 紅色背景
yellow = gdImageColorAllocate(img, 255, 255, 0); // 黃色星星

// 畫紅色背景
gdImageFilledRectangle(img, 0, 0, width, height, red);

// 設置星星的大小和位置
int star_size = (int)(0.28 * height);
int star_x = (int)(0.165 * width);
int star_y = (int)(0.265 * height);

// 畫大星星
draw_star(img, star_x, star_y, star_size, yellow, 11.0);

// 繪製小星星，位置根據實際國旗比例計算
double radius = 0.15 * height;
double angle = 360 / 7 * M_PI / 179.0;
double rotation = -M_PI / 7.5;
int cx = (int)(0.32 * width);
int cy = (int)(0.27 * height);

for (int i = -1; i &lt; 3; i++) {
int x = (int)(cx + radius * cos(i * angle + rotation));
int y = (int)(cy + radius * sin(i * angle + rotation));
draw_star(img, x, y, 19, yellow, M_PI / 5.0);
}
}

void draw_star(gdImagePtr img, int x, int y, int size, int color, double rotation_angle) {
gdPoint points[10];

// 计算星形的五个外点和五个内点
double outer_radius = size / 2;
double inner_radius = size / 6;
double angle = M_PI / 5.0;

for (int i = 0; i &lt; 10; i++) {
double radius = (i % 2 == 0) ? outer_radius : inner_radius;
double theta = rotation_angle + i * angle;
points[i].x = x + radius * cos(theta);
points[i].y = y + radius * sin(theta);
}

// 使用 gdImageFilledPolygon 绘制星形
gdImageFilledPolygon(img, points, 10, color);
}</pre>
<p><img alt="" height="267" src="/images/proc_flag.png" width="400"/></p>
<pre class="brush:cpp;auto-links:false;toolbar:false" contenteditable="false">#include &lt;stdio.h&gt;
#include &lt;gd.h&gt;
#include &lt;math.h&gt;

#define WIDTH 900
#define HEIGHT 600
#define FILENAME "south_korea_flag.png"

int main() {
    gdImagePtr im;
    FILE *pngout;
    int white, black, red, blue;

    im = gdImageCreate(WIDTH, HEIGHT);

    white = gdImageColorAllocate(im, 255, 255, 255);
    black = gdImageColorAllocate(im, 0, 0, 0);
    red = gdImageColorAllocate(im, 205, 0, 0);
    blue = gdImageColorAllocate(im, 0, 56, 168);

    // Background (white)
    gdImageFilledRectangle(im, 0, 0, WIDTH, HEIGHT , white);

    // Blue Circle (Yin-Yang Symbol)
    gdImageFilledArc(im, WIDTH / 2, HEIGHT / 2, WIDTH / 3, HEIGHT / 2, 210, 30, red, gdArc);

    // Red Circle (Yin-Yang Symbol)
    gdImageFilledArc(im, WIDTH / 2, HEIGHT / 2, WIDTH / 3, HEIGHT / 2, 30, 210, blue, gdArc);

  int circleX = 385;    // 圓心的 X 座標
  int circleY = 262.5;   // 圓心的 Y 座標
  int circleRadius = 75;     

  // 繪製圓形
  gdImageFilledEllipse(im, circleX, circleY, circleRadius * 2, circleRadius * 2, red);

  int circleX2 = 515;    // 圓心的 X 座標

 int circleY2 = 337.5;

  // 繪製圓形
  gdImageFilledEllipse(im, circleX2, circleY2, circleRadius * 2, circleRadius * 2, blue);

  {


  // 起點和終點位置

  int startX = 340;    
  // 線的起點 X 座標

  int startY = 90;   
  // 線的起點 Y 座標

  int endX = 200;     
  // 線的終點 X 座標

  int endY = 260;     
  // 線的終點 Y 座標

  int lineWidth = 23;  // 線的寬度

  // 繪製線段
  gdImageSetThickness(im, lineWidth);
  gdImageLine(im, startX, startY, endX, endY, black);
  // 繪製線段
  gdImageSetThickness(im, lineWidth);
  gdImageLine(im, startX -35, startY -10, endX -35, endY -10, black);

  // 繪製線段
  gdImageSetThickness(im, lineWidth);
  gdImageLine(im, startX -70, startY -20, endX -70, endY -20, black);

  int startX2 = 213;    
  // 線的起點 X 座標

  int startY2 = 270;   
  // 線的起點 Y 座標

  int endX2 = 133;     
  // 線的終點 X 座標

  int endY2 = 210;     
  // 線的終點 Y 座標

  int lineWidth2 = 25;  // 線的寬度

  // 繪製線段
  gdImageSetThickness(im, lineWidth);
  gdImageLine(im, startX2 +3, startY2, endX2 +3, endY2, white);

  gdImageSetThickness(im, lineWidth +10);
gdImageLine(im, startX2 -17, startY2 +9 , endX2 -17, endY2 +9 , white);

  gdImageSetThickness(im, lineWidth );
gdImageLine(im, startX2 +115, startY2 -145, endX2 +115, endY2 -145, white);

  gdImageSetThickness(im, lineWidth);
gdImageLine(im, startX2 +120, startY2 -155, endX2 +120, endY2 -155, white);

  gdImageSetThickness(im, lineWidth +12);
gdImageLine(im, startX2 +145, startY2 -155, endX2 +145, endY2 -155, white);
}
  {
    // 起點和終點位置

  int startX = 330;    
  // 線的起點 X 座標

  int startY = 520;   
  // 線的起點 Y 座標

  int endX = 190;     
  // 線的終點 X 座標

  int endY = 350;     
  // 線的終點 Y 座標

  int lineWidth = 23;  // 線的寬度

  // 繪製線段
  gdImageSetThickness(im, lineWidth);
  gdImageLine(im, startX, startY, endX, endY, black);
  // 繪製線段
  gdImageSetThickness(im, lineWidth);
  gdImageLine(im, startX -35, startY +10, endX -35, endY +10, black);

  // 繪製線段
  gdImageSetThickness(im, lineWidth);
  gdImageLine(im, startX -70, startY +20, endX -70, endY +20, black);

  int startX2 = 213;    
  // 線的起點 X 座標

  int startY2 = 330;   
  // 線的起點 Y 座標

  int endX2 = 133;     
  // 線的終點 X 座標

  int endY2 = 390;     
  // 線的終點 Y 座標

  int lineWidth2 = 25;  // 線的寬度

  // 繪製線段
  gdImageSetThickness(im, lineWidth +8);
  gdImageLine(im, startX2 -11, startY2, endX2 -11, endY2, white);

  gdImageSetThickness(im, lineWidth +10);
gdImageLine(im, startX2 -30, startY2 -9 , endX2 -30, endY2 -9 , white);

  gdImageSetThickness(im, lineWidth );
gdImageLine(im, startX2 +100, startY2 +150, endX2 +100, endY2 +150, white);

  gdImageSetThickness(im, lineWidth);
gdImageLine(im, startX2 +120, startY2 +155, endX2 +120, endY2 +155, white);

  gdImageSetThickness(im, lineWidth +14);
gdImageLine(im, startX2 +145, startY2 +157, endX2 +145, endY2 +157, white);

    gdImageSetThickness(im, lineWidth -10);
gdImageLine(im, 232, 426, 206, 448, white);

  }

  {
    // 起點和終點位置

  int startX = 564;    
  // 線的起點 X 座標

  int startY = 520;   
  // 線的起點 Y 座標

  int endX = 704;     
  // 線的終點 X 座標

  int endY = 350;     
  // 線的終點 Y 座標

  int lineWidth = 23;  // 線的寬度

  // 繪製線段
  gdImageSetThickness(im, lineWidth);
  gdImageLine(im, startX +70, startY +20, endX +70, endY +20, black);

    // 繪製線段
  gdImageSetThickness(im, lineWidth);
  gdImageLine(im, startX, startY, endX, endY, black);

    // 繪製線段
  gdImageSetThickness(im, lineWidth);
  gdImageLine(im, startX +35, startY +10, endX +35, endY +10, black);

gdImageSetThickness(im, lineWidth -10);
gdImageLine(im, 624, 400, 734, 490, white);

  int startX2 = 553;    
  // 線的起點 X 座標

  int startY2 = 330;   
  // 線的起點 Y 座標

  int endX2 = 633;     
  // 線的終點 X 座標

  int endY2 = 390;     
  // 線的終點 Y 座標

  int lineWidth2 = 25;  // 線的寬度

  // 繪製線段
  gdImageSetThickness(im, lineWidth +8);
  gdImageLine(im, startX2 +139, startY2, endX2 +139, endY2, white);

  gdImageSetThickness(im, lineWidth +10);
gdImageLine(im, startX2 +157, startY2 -9 , endX2 +157, endY2 -9 , white);

  gdImageSetThickness(im, lineWidth);
gdImageLine(im, startX2 +25, startY2 +155, endX2 +25, endY2 +155, white);

  gdImageSetThickness(im, lineWidth +30);
gdImageLine(im, startX2 -3, startY2 +170, endX2 , endY2 +170, white);
  }
  {
    // 起點和終點位置

  int startX = 330;    
  // 線的起點 X 座標

  int startY = 520;   
  // 線的起點 Y 座標

  int endX = 190;     
  // 線的終點 X 座標

  int endY = 350;     
  // 線的終點 Y 座標

  int lineWidth = 23;  // 線的寬度

  // 繪製線段
  gdImageSetThickness(im, lineWidth);
  gdImageLine(im, startX, startY, endX, endY, black);
  // 繪製線段
  gdImageSetThickness(im, lineWidth);
  gdImageLine(im, startX -35, startY +10, endX -35, endY +10, black);

  // 繪製線段
  gdImageSetThickness(im, lineWidth);
  gdImageLine(im, startX -70, startY +20, endX -70, endY +20, black);

  int startX2 = 213;    
  // 線的起點 X 座標

  int startY2 = 330;   
  // 線的起點 Y 座標

  int endX2 = 133;     
  // 線的終點 X 座標

  int endY2 = 390;     
  // 線的終點 Y 座標

  int lineWidth2 = 25;  // 線的寬度

  // 繪製線段
  gdImageSetThickness(im, lineWidth +8);
  gdImageLine(im, startX2 -11, startY2, endX2 -11, endY2, white);

  gdImageSetThickness(im, lineWidth +10);
gdImageLine(im, startX2 -30, startY2 -9 , endX2 -30, endY2 -9 , white);

  gdImageSetThickness(im, lineWidth );
gdImageLine(im, startX2 +100, startY2 +150, endX2 +100, endY2 +150, white);

  gdImageSetThickness(im, lineWidth);
gdImageLine(im, startX2 +120, startY2 +155, endX2 +120, endY2 +155, white);

  gdImageSetThickness(im, lineWidth +14);
gdImageLine(im, startX2 +145, startY2 +157, endX2 +145, endY2 +157, white);

    gdImageSetThickness(im, lineWidth -10);
gdImageLine(im, 232, 426, 206, 448, white);

  }
  {
    // 起點和終點位置

  int startX = 564;    
  // 線的起點 X 座標

  int startY = 97;   
  // 線的起點 Y 座標

  int endX = 704;     
  // 線的終點 X 座標

  int endY = 267;     
  // 線的終點 Y 座標

  int lineWidth = 23;  // 線的寬度

  // 繪製線段
  gdImageSetThickness(im, lineWidth);
  gdImageLine(im, startX +70, startY -20, endX +70, endY -20, black);

    // 繪製線段
  gdImageSetThickness(im, lineWidth);
  gdImageLine(im, startX, startY, endX, endY, black);

    gdImageSetThickness(im, lineWidth -10);
gdImageLine(im, 624, 212, 734, 118, white);

    // 繪製線段
  gdImageSetThickness(im, lineWidth);
  gdImageLine(im, startX +35, startY -10, endX +35, endY -10, black);

  int startX2 = 553;    
  // 線的起點 X 座標

  int startY2 = 277;   
  // 線的起點 Y 座標

  int endX2 = 633;     
  // 線的終點 X 座標

  int endY2 = 217;     
  // 線的終點 Y 座標

  int lineWidth2 = 25;  // 線的寬度

  // 繪製線段
  gdImageSetThickness(im, lineWidth +8);
  gdImageLine(im, startX2 +134, startY2, endX2 +134, endY2, white);

  gdImageSetThickness(im, lineWidth +10);
gdImageLine(im, startX2 +157, startY2 +9 , endX2 +157, endY2 +9 , white);

  gdImageSetThickness(im, lineWidth);
gdImageLine(im, startX2 +25, startY2 -155, endX2 +25, endY2 -155, white);

    gdImageSetThickness(im, lineWidth +30);
gdImageLine(im, startX2 -5, startY2 -155, endX2 -5, endY2 -155, white);

  }

    // Save image
FILE *outputFile = fopen("./../images/korea_flag.png", "wb");
if (outputFile == NULL) {
    fprintf(stderr, "Error opening the output file.\n");
    return 1;
}
  gdImagePngEx(im, outputFile, 9);
      fclose(outputFile);
      gdImageDestroy(im);
      return 0;
  }</pre>
<p><img alt="" height="267" src="/images/korea_flag.png" width="400"/></p>
<h1>w11</h1>
<p></p>
<pre class="brush:cpp;auto-links:false;toolbar:false" contenteditable="false">#include &lt;stdio.h&gt;
#include &lt;gd.h&gt;
#include &lt;math.h&gt;

int main() {
    int width = 800;
    int height = 600;

    gdImagePtr img = gdImageCreateTrueColor(width, height);
    gdImageAlphaBlending(img, 0);

    FILE *outputFile = fopen("hellogd.png", "wb");
    if (outputFile == NULL) {

fprintf(stderr, "Error opening the output file.\n");

return 1;
    }

    int red = gdImageColorAllocate(img, 255, 0, 0);
    int blue = gdImageColorAllocate(img, 0, 0, 255);
    int black = gdImageColorAllocate(img, 0, 0, 0);
    int white = gdImageColorAllocate(img, 255, 255, 255);
    // 長方形塗色
    gdImageFilledRectangle(img, 0, 0, width, height, white);
    gdImageFilledRectangle(img, 0, 0, (int)width/4, (int)height/4, blue);
    // 橢圓形塗色
    gdImageFilledEllipse(img, (int)width*3/4, (int)height/4, (int)width/4, (int)width/4, red);
    // 橢圓形畫線
    gdImageEllipse(img, (int)width*3/4, (int)height*3/4, (int)width/4, (int)width/4, red);
    // 畫直線
    gdImageLine(img, (int)width/2, (int)height/2, (int)width/2, (int)height/2 + 100, blue);

    // 多邊形畫線
    gdPoint points[4];
    points[0].x = (int)width/4;
    points[0].y = (int)height*3/4;
    points[1].x = points[0].x + 100;
    points[1].y = points[0].y;
    points[2].x = points[1].x;
    points[2].y = points[1].y + 100;
    points[3].x = points[2].x - 100;
    points[3].y = points[2].y;
    gdImagePolygon(img, points, 4, black);

    // 多邊形塗色
    gdPoint points2[4];
    points2[0].x = (int)width/3;
    points2[0].y = (int)height/2;
    points2[1].x = points2[0].x + 100;
    points2[1].y = points2[0].y;
    points2[2].x = points2[1].x;
    points2[2].y = points2[1].y + 100;
    points2[3].x = points2[2].x - 150;
    points2[3].y = points2[2].y;
    gdImageFilledPolygon(img, points2, 4, red);

    gdImagePngEx(img, outputFile, 9);
    fclose(outputFile);
    gdImageDestroy(img);
    return 0;
}</pre>
<p><br/><img caption="false" height="300" src="/images/hellogd.png" width="400"/></p>
<h1>w13</h1>
<pre class="brush:cpp;auto-links:false;toolbar:false" contenteditable="false">// 包含標準輸出入程式庫的標頭文件
#include &lt;stdio.h&gt;

// 主函式
int main() {
    // Open a file to write displacement and velocity data
    FILE *outputFile = fopen("motion_data.txt", "w");
    if (!outputFile) {
        fprintf(stderr, "Failed to create data file.\n");
        return 1;
    }

    // Simulate motion for 10 seconds and calculate displacement and velocity, while writing data to the file
    double x = 0.2;  // Initial displacement
    double v = 0.0;  // Initial velocity
    double dt = 0.01; // Time step
    double t = 0.0;  // Time

    while (t &lt;= 10.0) {
        double acceleration = (-10.0 * x - 0.5 * v) / 1.0; // Modified system parameters here
        v += acceleration * dt;
        x += v * dt;

        fprintf(outputFile, "%lf %lf %lf\n", t, x, v);

        t += dt;
    }

    // Close the data file
    fclose(outputFile);

    // Start a Gnuplot process using popen
    FILE *gnuplotPipe = popen("gnuplot -persistent", "w");
    if (!gnuplotPipe) {
        fprintf(stderr, "Failed to start Gnuplot.\n");
        return 1;
    }

    // Use Gnuplot plotting commands, specify font and output as PNG
    fprintf(gnuplotPipe, "set terminal pngcairo enhanced font 'default,10' size 800,400\n");
    fprintf(gnuplotPipe, "set output './../images/motion_plot.png'\n");
    fprintf(gnuplotPipe, "set title 'Displacement and Velocity vs. Time'\n");
    fprintf(gnuplotPipe, "set xlabel 'Time (s)'\n");
    fprintf(gnuplotPipe, "set ylabel 'Displacement (m)'\n");
    fprintf(gnuplotPipe, "plot 'motion_data.txt' using 1:2 with lines lw 2 title 'Displacement', \
                             'motion_data.txt' using 1:3 with lines lw 2 title 'Velocity'\n");

    // Close the Gnuplot process
    fprintf(gnuplotPipe, "exit\n");
    pclose(gnuplotPipe);

    return 0;
}</pre>
<p><img alt="" height="200" src="/images/motion_plot.png" width="400"/></p>
<h1>W15</h1>
<pre class="brush:cpp;auto-links:false;toolbar:false" contenteditable="false">#include &lt;stdio.h&gt;
#include &lt;gd.h&gt;
#include &lt;math.h&gt;

void draw_roc_flag(gdImagePtr img);

int main() {
    int width = 1200;
    int height = (int)(width * 2.0 / 3.0);

    gdImagePtr img = gdImageCreateTrueColor(width, height);
    gdImageAlphaBlending(img, 0);

    draw_roc_flag(img);

    FILE *outputFile = fopen("roc_flag_in_gd.png", "wb");
    if (outputFile == NULL) {
        fprintf(stderr, "Error opening the output file.\n");
        return 1;
    }
    gdImagePngEx(img, outputFile, 9);
    fclose(outputFile);
    gdImageDestroy(img);
    return 0;
}

void draw_roc_flag(gdImagePtr img) {
    int width = gdImageSX(img);
    int height = gdImageSY(img);
    int red, white, blue;
    int center_x = (int)(width / 4);
    int center_y = (int)(height / 4);
    int sun_radius = (int)(width / 8);
    int white_circle_dia = sun_radius;
    int blue_circle_dia = white_circle_dia + white_circle_dia * 2 / 15;

    red = gdImageColorAllocate(img, 255, 0, 0);
    white = gdImageColorAllocate(img, 255, 255, 255);
    blue = gdImageColorAllocate(img, 0, 0, 149);

    gdImageFilledRectangle(img, 0, 0, width, height, red);
    gdImageFilledRectangle(img, 0, 0, (int)(width / 2.0), (int)(height / 2.0), blue);

    // 利用一個藍色大圓與白色小圓畫出藍色環狀
    gdImageFilledEllipse(img, center_x, center_y, blue_circle_dia, blue_circle_dia, blue);
    gdImageFilledEllipse(img, center_x, center_y, white_circle_dia, white_circle_dia, white);

    // 不含太陽的部分

    // 連接第二組ABED的白線
    int ax = 429;
    int ay = 125;
    int bx = 279;
    int by = 165;
    int ex = 170;
    int ey = 274;
    int dx = 170;
    int dy = 274;

    gdImageLine(img, ax, ay, bx, by, white);
    gdImageLine(img, bx, by, ex, ey, white);
    gdImageLine(img, ex, ey, dx, dy, white);
    gdImageLine(img, dx, dy, ax, ay, white);
}
</pre>
<p><img alt="" height="267" src="/images/roc_flag_in_gd.png" width="400"/></p>
<h1>C_EX</h1>
<p>1.</p>
<p>#include &lt;stdio.h&gt;<br/>void main()<br/>{<br/>int a;<br/>a = 3;<br/>printf("%d\n", !a );<br/>a = 0;<br/>printf("%d\n", !a );<br/>}</p>
<p><img alt="" height="66" src="/images/螢幕擷取畫面 2023-12-26 210725.png" width="308"/></p>
<p>2.</p>
<p>#include &lt;stdio.h&gt;<br/>void main()<br/>{<br/>printf("%d\n", 1 &amp;&amp; 3 );<br/>printf("%d\n", 0 &amp;&amp; 0 );<br/>printf("%d\n", 2 &amp;&amp; 2 );<br/>}</p>
<p><img alt="" height="54" src="/images/螢幕擷取畫面 2023-12-26 211737.png" width="335"/></p>
<p>3.</p>
<p>#include &lt;stdio.h&gt;<br/>void main()<br/>{<br/>printf("%d\n", 1 || 0 );<br/>printf("%d\n", 0 || 0 );<br/>printf("%d\n", 2 || 2 );<br/>}</p>
<p><img alt="" height="60" src="/images/螢幕擷取畫面 2023-12-26 212246.png" width="348"/></p>
<p>4.</p>
<p><span>#include &lt;stdio.h&gt;</span><br/><span>void main()</span><br/><span>{</span><br/><span>char a;</span><br/><span>printf( " The size of int is %d \n", sizeof(int) );</span><br/><span>printf( " The size of char a is %d \n", sizeof(a) );</span><br/><span>}</span></p>
<p><img alt="" height="97" src="/images/螢幕擷取畫面 2023-12-26 212612.png" width="294"/></p>
<p>5.</p>
<p>#include &lt;stdio.h&gt;</p>
<p>int main() {<br/> char ch;<br/> printf("input a char: ");<br/> scanf("%c", &amp;ch);<br/> if (ch == 'a') {<br/> printf("You pressed 'a'\n");<br/> }<br/> return 0;<br/>}</p>
<p><img alt="" height="66" src="/images/螢幕擷取畫面 2023-12-26 212754.png" width="323"/></p>
<p>6.</p>
<p>#include &lt;stdio.h&gt;</p>
<p>int main() {<br/>char ch; // 宣告一個字符型變數 ch</p>
<p>// 提示用戶輸入一個字符<br/>printf("輸入一個字符：");</p>
<p>// 檢查 scanf 的返回值，確保成功讀取了一個字符<br/>if (scanf("%c", &amp;ch) != 1) {<br/>fprintf(stderr, "錯誤：無法讀取字符。\n");<br/>return 1; // 返回錯誤碼<br/>}</p>
<p>// 檢查輸入的字符是否為 'a'<br/>if (ch == 'a') {<br/>printf("你輸入的是 'a'\n"); // 如果是 'a'，則印出相應的消息<br/>} else {<br/>printf("你輸入的不是 'a'\n"); // 如果不是 'a'，則印出相應的消息<br/>}</p>
<p>return 0;<br/>}</p>
<p><img alt="" height="86" src="/images/螢幕擷取畫面 2023-12-26 213054.png" width="351"/></p>
<p>7.</p>
<p>#include &lt;stdio.h&gt;</p>
<p>int main() {<br/>int i; // 宣告一個整數變數 i</p>
<p>// 提示用戶輸入一個整數<br/>printf("輸入一個整數：");</p>
<p>// 檢查 scanf 的返回值，確保成功讀取了一個整數<br/>if (scanf("%d", &amp;i) != 1) {<br/>fprintf(stderr, "錯誤：無法讀取整數。\n");<br/>return 1; // 返回錯誤碼<br/>}</p>
<p>// 根據 i 的值進行不同的判斷<br/>if (i &lt; 100) {<br/>printf("i &lt; 100\n");<br/>} else {<br/>if ((i &gt;= 100) &amp;&amp; (i &lt; 200)) {<br/>printf("i &gt;= 100 and i &lt; 200\n");<br/>} else {<br/>printf("i &gt;= 200\n");<br/>}<br/>}</p>
<p>return 0;<br/>}</p>
<p><img alt="" height="181" src="/images/螢幕擷取畫面 2023-12-26 213416.png" width="346"/></p>
<p>8.</p>
<p>#include &lt;stdio.h&gt;</p>
<p>int main() {<br/>char c; // 宣告一個字符型變數 c</p>
<p>// 提示用戶輸入一個字符<br/>printf("輸入一個字符：");</p>
<p>// 檢查 scanf 的返回值，確保成功讀取了一個字符<br/>if (scanf(" %c", &amp;c) != 1) {<br/>fprintf(stderr, "錯誤：無法讀取字符。\n");<br/>return 1; // 返回錯誤碼<br/>}</p>
<p>// 使用 switch 陳述式根據讀取的字符執行相應的分支<br/>switch(c) {<br/>case 'a':<br/>printf("你按下了 'a'\n");<br/>break;<br/>case 'b':<br/>printf("你按下了 'b'\n");<br/>break;<br/>case 'c':<br/>printf("你按下了 'c'\n");<br/>break;<br/>default:<br/>printf("不是 'a'、'b' 或 'c'\n");<br/>break;<br/>}</p>
<p>return 0;<br/>}</p>
<p><img alt="" height="78" src="/images/螢幕擷取畫面 2023-12-26 213617.png" width="335"/></p>
<p>9.</p>
<p>#include &lt;stdio.h&gt;</p>
<p>int main() {<br/>char c; // 宣告一個字符型變數 c</p>
<p>// 提示用戶輸入一個字符<br/>printf("輸入一個字符：");</p>
<p>// 檢查 scanf 的返回值，確保成功讀取了一個字符<br/>if (scanf(" %c", &amp;c) != 1) {<br/>fprintf(stderr, "錯誤：無法讀取字符。\n");<br/>return 1; // 返回錯誤碼<br/>}</p>
<p>// 使用 switch 陳述式根據讀取的字符執行相應的分支<br/>switch(c) {<br/>case 'a':<br/>printf("你按下了 'a'\n");<br/>break;<br/>case 'b':<br/>printf("你按下了 'b'\n");<br/>break;<br/>case 'c':<br/>printf("你按下了 'c'\n");<br/>break;<br/>default:<br/>printf("不是 'a'、'b' 或 'c'\n");<br/>break;<br/>}</p>
<p>return 0;<br/>}</p>
<p><img alt="" height="89" src="/images/螢幕擷取畫面 2023-12-26 213743.png" width="324"/></p>
<p>10.</p>
<p>#include&lt;stdio.h&gt;</p>
<p>void main() {<br/>int i;<br/>for (i = 0; i &lt; 6; i++) {<br/>printf("%d\n", i); /* 印出 i */<br/>}<br/>}</p>
<p><img alt="" height="160" src="/images/螢幕擷取畫面 2023-12-26 213912.png" width="367"/></p>
<h1>ansic</h1>
<p>1.</p>
<p>int main() {<br/> int x; // Declare variable x</p>
<p>// Print header for the table<br/> printf("x+1\tx+3\tx+5\tx+7\n\n");<br/> printf("---------------------------\n");</p>
<p>// Loop to generate and print table values<br/> for (x = 1; x &lt;= 15; x += 3)<br/> printf("%d\t%d\t%d\t%d\n", x, (x + 2), (x + 4), (x + 6));</p>
<p>return 0; // Indicate successful program execution<br/>}</p>
<p><img alt="" height="187" src="/images/螢幕擷取畫面 2023-12-26 215711.png" width="336"/></p>
<p>2.</p>
<p>#include &lt;stdio.h&gt;</p>
<p>int main() {<br/> int a, b;</p>
<p>// Prompt user for input<br/> printf("Input two pairs values (integer values):\n");</p>
<p>// Read two integer values from user and store them in 'a' and 'b'<br/> if (scanf("%d %d", &amp;a, &amp;b) != 2) {<br/> fprintf(stderr, "Error: Invalid input. Please enter two integer values.\n");<br/> return 1; // Return an error code for invalid input<br/> }</p>
<p>// Check if 'a' is not equal to 'b'<br/> if (a != b) {<br/> // Check if 'b' is greater than 'a'<br/> if (b &gt; a) {<br/> printf("Ascending order\n"); // Print message for ascending order<br/> } else {<br/> printf("Descending order\n"); // Print message for descending order<br/> }<br/> }</p>
<p>return 0; // End of program<br/>}</p>
<p><img alt="" height="138" src="/images/螢幕擷取畫面 2023-12-26 220153.png" width="441"/></p>
<p>3.</p>
<p>#include &lt;stdio.h&gt;</p>
<p>int main() {<br/> int j, numbers[5], total = 0; // 宣告數組用於存儲 5 個數字和變數用於總和</p>
<p>// 提示用戶輸入五個數字並存入數組<br/> for (j = 0; j &lt; 5; j++) {<br/> printf("\nInput the %s number: ", j == 0 ? "first" : (j == 1 ? "second" : (j == 2 ? "third" : (j == 3 ? "fourth" : "fifth"))));<br/> if (scanf("%d", &amp;numbers[j]) != 1) {<br/> fprintf(stderr, "Error: Invalid input for the %s number.\n", j == 0 ? "first" : (j == 1 ? "second" : (j == 2 ? "third" : (j == 3 ? "fourth" : "fifth"))));<br/> return 1;<br/> }<br/> }</p>
<p>for (j = 0; j &lt; 5; j++) {<br/> if ((numbers[j] % 2) != 0) // 檢查數字是否為奇數<br/> {<br/> total += numbers[j]; // 將奇數添加到總和中<br/> }<br/> }</p>
<p>printf("\nSum of all odd values: %d", total); // 輸出所有奇數的總和<br/> return 0;<br/>}</p>
<p><img alt="" height="291" src="/images/螢幕擷取畫面 2023-12-26 220419.png" width="484"/></p>
<p>4.</p>
<p>#include &lt;stdio.h&gt;</p>
<p>int main() {<br/>int x, y;<br/>int result_x, result_y; // 用於儲存 scanf 的返回值</p>
<p>// 獲取第一個整數<br/>printf("輸入第一個整數：");<br/>result_x = scanf("%d", &amp;x);<br/>if (result_x != 1) {<br/>printf("錯誤：請輸入整數。\n");<br/>return 1;<br/>}</p>
<p>// 獲取第二個整數<br/>printf("輸入第二個整數：");<br/>result_y = scanf("%d", &amp;y);<br/>if (result_y != 1) {<br/>printf("錯誤：請輸入整數。\n");<br/>return 1;<br/>}</p>
<p>// 計算並輸出它們的乘積<br/>printf("這兩個整數的乘積 = %d\n", x * y);</p>
<p>return 0;<br/>}</p>
<p><img alt="" height="108" src="/images/螢幕擷取畫面 2023-12-26 220624.png" width="655"/></p>
<p>5.</p>
<p>#include &lt;stdio.h&gt;</p>
<p>int main()<br/>{<br/>int a = 125, b = 12345; /* 宣告並初始化整數變數 */<br/>long ax = 1234567890; /* 宣告並初始化長整數變數 */<br/>short s = 4043; /* 宣告並初始化短整數變數 */<br/>float x = 2.13459; /* 宣告並初始化浮點數變數 */<br/>double dx = 1.1415927; /* 宣告並初始化雙精度浮點數變數 */<br/>char c = 'W'; /* 宣告並初始化字符變數 */<br/>unsigned long ux = 2541567890; /* 宣告並初始化無符號長整數變數 */</p>
<p>/* 各種算術運算和類型轉換 */<br/>printf("a + c = %d\n", a + c);<br/>printf("x + c = %f\n", x + c);<br/>printf("dx + x = %f\n", dx + x);<br/>printf("((int) dx) + ax = %ld\n", ((int) dx) + ax);<br/>printf("a + x = %f\n", a + x);<br/>printf("s + b = %d\n", s + b);<br/>printf("ax + b = %ld\n", ax + b);<br/>printf("s + c = %hd\n", s + c);<br/>printf("ax + c = %ld\n", ax + c);<br/>printf("ax + ux = %lu\n", ax + ux);</p>
<p>return 0;<br/>}</p>
<p><img alt="" height="246" src="/images/螢幕擷取畫面 2023-12-26 220749.png" width="348"/></p>
<p>6.</p>
<p>#include &lt;stdio.h&gt;</p>
<p>int main(void) {<br/> unsigned char char1, char2, char3, char4, char5, char6, char7, char8;</p>
<p>// Print table header<br/> printf("|---------------------------------------------------------------------------------------------------------|\n");<br/> printf("|extended ASCII table - excluding control characters |\n");<br/> printf("| Ch Dec Hex | Ch Dec Hex | Ch Dec Hex | Ch Dec Hex | Ch Dec Hex | Ch Dec Hex | Ch Dec Hex |\n");<br/> printf("|----------------|----------------|-------------|--------------|--------------|-------------|-------------|\n");</p>
<p>// Loop through characters<br/> for (int i = 0; i &lt; 32; i++) {<br/> // Calculate characters for different ranges<br/> char1 = i;<br/> char2 = i + 32;<br/> char3 = i + 64;<br/> char4 = i + 96;<br/> char5 = i + 128; // extended ASCII characters<br/> char6 = i + 160;<br/> char7 = i + 192;<br/> char8 = i + 224;</p>
<p>// Print characters and their decimal and hexadecimal representations<br/> printf("| %c %3d %#x ", char2, char2, char2);<br/> printf("| %c %3d %#x ", char3, char3, char3);</p>
<p>// Special case for DEL character<br/> if (char4 == 127) {<br/> printf("|%s %3d %#x |", "DEL", char4, char4);<br/> } else {<br/> printf("| %c %3d %#x |", char4, char4, char4);<br/> }</p>
<p>// Print extended ASCII characters for the current system.<br/> printf(" %c %3d %#x | %c %3d %#x | %c %3d %#x | %c %3d %#x |\n",<br/> char5, char5, char5,<br/> char6, char6, char6,<br/> char7, char7, char7,<br/> char8, char8, char8);<br/> }</p>
<p>return 0; // Indicate successful execution of the program<br/>}</p>
<p><img alt="" height="237" src="/images/螢幕擷取畫面 2023-12-26 221206.png" width="400"/></p>
<p>7.</p>
<p>#include &lt;stdio.h&gt;</p>
<p>int main() {<br/> int x; // 用於存儲總里程的變數，以公里為單位<br/> float y; // 用於存儲總耗油量的變數，以升為單位</p>
<p>// 提示用戶輸入總里程並存入 'x'<br/> printf("Input total distance in km: ");<br/> // 檢查 scanf 的返回值，確保成功讀取一個整數<br/> if (scanf("%d", &amp;x) != 1) {<br/> fprintf(stderr, "Error: Invalid input for total distance.\n");<br/> return 1;<br/> }</p>
<p>// 提示用戶輸入總耗油量並存入 'y'<br/> printf("Input total fuel spent in liters: ");<br/> // 檢查 scanf 的返回值，確保成功讀取一個浮點數<br/> if (scanf("%f", &amp;y) != 1) {<br/> fprintf(stderr, "Error: Invalid input for total fuel spent.\n");<br/> return 1;<br/> }</p>
<p>// 計算並打印平均油耗<br/> printf("Average consumption (km/lt) %.3f ", x / y);<br/> printf("\n");</p>
<p>return 0;<br/>}</p>
<p><img alt="" height="101" src="/images/螢幕擷取畫面 2023-12-26 222054.png" width="386"/></p>
<p>8.</p>
<p>#include &lt;stdio.h&gt;</p>
<p>int main() {<br/> // 声明变量<br/> float principal_amt, rate_of_interest, days, interest;<br/> const int yearInDays = 365; // 用于转换利率的常量</p>
<p>// 提示用户输入贷款金额<br/> printf("输入贷款金额 (输入 0 退出): ");<br/> if (scanf("%f", &amp;principal_amt) != 1) {<br/> fprintf(stderr, "Error: Invalid input for loan amount.\n");<br/> return 1;<br/> }</p>
<p>// 主循环用于处理贷款<br/> while ((int)principal_amt != 0) <br/> {<br/> // 提示用户输入利率<br/> printf("输入利率: ");<br/> if (scanf("%f", &amp;rate_of_interest) != 1) {<br/> fprintf(stderr, "Error: Invalid input for interest rate.\n");<br/> return 1;<br/> }</p>
<p>// 提示用户输入贷款期限（天）<br/> printf("输入贷款期限（天）: ");<br/> if (scanf("%f", &amp;days) != 1) {<br/> fprintf(stderr, "Error: Invalid input for loan term.\n");<br/> return 1;<br/> }</p>
<p>// 计算利息<br/> interest = (principal_amt * rate_of_interest * days) / yearInDays;</p>
<p>// 显示利息金额<br/> printf("利息金额为 $%.2f\n", interest);</p>
<p>// 提示用户输入下一个贷款金额<br/> printf("\n\n输入贷款金额 (输入 0 退出): ");<br/> if (scanf("%f", &amp;principal_amt) != 1) {<br/> fprintf(stderr, "Error: Invalid input for loan amount.\n");<br/> return 1;<br/> }<br/> }</p>
<p>return 0;<br/>}</p>
<p><img alt="" height="185" src="/images/螢幕擷取畫面 2023-12-26 221728.png" width="413"/></p>
<p>9.</p>
<p>#include &lt;stdio.h&gt;<br/>#include &lt;stdlib.h&gt;<br/>#include &lt;limits.h&gt;</p>
<p>int divide_two(int dividend_num, int divisor_num) {<br/> int sign = (float)dividend_num / divisor_num &gt; 0 ? 1 : -1;<br/> unsigned int dvd = dividend_num &gt; 0 ? dividend_num : -dividend_num;<br/> unsigned int dvs = divisor_num &gt; 0 ? divisor_num : -divisor_num;<br/> unsigned int bit_num[33];<br/> unsigned int i = 0;<br/> long long d = dvs;</p>
<p>bit_num[i] = d;<br/> while (d &lt;= dvd) {<br/> bit_num[++i] = d = d &lt;&lt; 1;<br/> }<br/> i--;</p>
<p>unsigned int result = 0;<br/> while (dvd &gt;= dvs) {<br/> if (dvd &gt;= bit_num[i]) {<br/> dvd -= bit_num[i];<br/> result += (1 &lt;&lt; i);<br/> } else {<br/> i--;<br/> }<br/> }</p>
<p>if (result &gt; INT_MAX &amp;&amp; sign &gt; 0) {<br/> return INT_MAX;<br/> }<br/> return (int)result * sign;<br/>}</p>
<p>int main(void) {<br/> int dividend_num = 15;<br/> int divisor_num = 3;<br/> printf("Quotient after dividing %d and %d: %d", dividend_num, divisor_num, divide_two(dividend_num, divisor_num));<br/> return 0;<br/>}</p>
<p><img alt="" height="68" src="/images/螢幕擷取畫面 2023-12-26 222337.png" width="550"/></p>
<p>10.</p>
<p>#include &lt;stdio.h&gt;</p>
<p>int main() {<br/>char id[10]; // 用於存儲員工ID的變數（最多10個字符）<br/>int hour; // 用於存儲工作時數的變數<br/>double value, salary; // 用於每小時薪資和總薪資的變數</p>
<p>// 提示使用者輸入員工ID<br/>printf("輸入員工ID（最多10個字符）：");</p>
<p>// 檢查scanf的返回值<br/>if (scanf("%9s", id) != 1) {<br/>fprintf(stderr, "錯誤：無法讀取員工ID。\n");<br/>return 1; // 返回錯誤碼<br/>}</p>
<p>// 提示使用者輸入工作時數<br/>printf("\n輸入工作時數：");</p>
<p>// 檢查scanf的返回值<br/>if (scanf("%d", &amp;hour) != 1) {<br/>fprintf(stderr, "錯誤：無法讀取工作時數。\n");<br/>return 1; // 返回錯誤碼<br/>}</p>
<p>// 提示使用者輸入每小時薪資<br/>printf("\n每小時薪資：");</p>
<p>// 檢查scanf的返回值<br/>if (scanf("%lf", &amp;value) != 1) {<br/>fprintf(stderr, "錯誤：無法讀取每小時薪資。\n");<br/>return 1; // 返回錯誤碼<br/>}</p>
<p>// 計算總薪資<br/>salary = value * hour;</p>
<p>// 印出員工ID和薪資<br/>printf("\n員工ID = %s\n薪資 = U$ %.2lf\n", id, salary);</p>
<p>return 0;<br/>}</p>
<p><img alt="" height="201" src="/images/螢幕擷取畫面 2023-12-26 222715.png" width="397"/></p>
<h1>期末總結</h1>
<pre class="brush:cpp;auto-links:false;toolbar:false" contenteditable="false">A: 是否按照進度明確標示倉儲的改版歷程:有的，我有跟著影片一步一步做。</pre>
<p><video controls="controls" height="641" width="1000">
<source src="/images/A倉儲.mp4" type="video/mp4"/></video><br/><br/></p>
<p></p>
<p></p>
<pre class="brush:cpp;auto-links:false;toolbar:false" contenteditable="false">B: 是否根據 IPv4 與 IPv6 網路環境設定進行作法討論：有的，我有跟著老師的影片做，也了解如何設定網路。</pre>
<p><video controls="controls" height="641" width="1000">
<source src="/images/IPV4跟6網路設定.mp4" type="video/mp4"/></video><br/><br/></p>
<pre class="brush:cpp;auto-links:false;toolbar:false" contenteditable="false">C: 是否就 Replit、s.cycu.org 與 localhost 情境下對個人與分組倉儲進行設定操作。我有跟著老師給的網站做，也有做分組的Replit</pre>
<p><video controls="controls" height="641" width="1000">
<source src="/images/C個人跟團隊倉儲.mp4" type="video/mp4"/></video><br/><br/></p>
<pre class="brush:cpp;auto-links:false;toolbar:false" contenteditable="false">E: 是否完成 w2-w5 週任務中的 Exercises:有完成，並且有看影片。</pre>
<p><video controls="controls" height="641" width="1000">
<source src="/images/E%20w2-5.mp4" type="video/mp4"/></video><br/><br/></p>
<pre class="brush:cpp;auto-links:false;toolbar:false" contenteditable="false">F: 是否完成 w6-w7 週任務中的練習一與練習二</pre>
<p><video controls="controls" height="641" width="1000">
<source src="/images/F.W6-7.mp4" type="video/mp4"/></video><br/><br/></p>
<p><span></span></p>
<pre class="brush:cpp;auto-links:false;toolbar:false" contenteditable="false">G: 是否完成 C 結合 gd 繪圖程式庫, 畫出 PROC(規格), United Kingdom(規格), Japan(規格)與 South Korea(規格) Flags</pre>
<p><video controls="controls" height="641" width="1000">
<source src="/images/G.畫國旗.mp4" type="video/mp4"/></video><br/><br/></p>
<h1>W16</h1>
<p><img alt="" height="200" src="/images/mass_spring_damper_system.png" width="400"/></p>
<pre class="brush:cpp;auto-links:false;toolbar:false" contenteditable="false">#include &lt;stdio.h&gt;

// System parameters
#define M1 2.0
#define M2 3.0
#define K1 0.5
#define K2 1.0
#define K3 15.0
#define C1 0.25
#define C2 0.33
#define C3 0.5

// Function to calculate the derivative of the state
void calculate_derivative(double t, double state[4], double derivative[4]) {
    derivative[0] = state[2];  // dx1/dt = v1
    derivative[1] = state[3];  // dx2/dt = v2

    double delta_x = state[0] - state[1];

    // dv1/dt
    derivative[2] = -(K1 * state[0] + K2 * delta_x) / M1;

    // dv2/dt
    derivative[3] = -(K3 * state[1] - K2 * delta_x) / M2;
}

// Euler's Method for solving the system
void euler_method(double t_initial, double t_final, double dt, double initial_conditions[4]) {
    FILE *output_file;
    output_file = fopen("trajectory_data.txt", "w");

    double t = t_initial;
    double state[4];
    for (int i = 0; i &lt; 4; ++i) {
        state[i] = initial_conditions[i];
    }

    while (t &lt;= t_final) {
        fprintf(output_file, "%f %f %f %f %f\n", t, state[0], state[1], state[2], state[3]);

        double derivative[4];
        calculate_derivative(t, state, derivative);

        for (int i = 0; i &lt; 4; ++i) {
            state[i] += derivative[i] * dt;
        }

        t += dt;
    }

    fclose(output_file);
}

int main() {
    // Define the initial conditions
    double initial_conditions[4] = {1.0, -0.5, 0.0, 0.0};  // x1, x2, v1, v2

    // Time parameters
    double t_initial = 0.0;
    double t_final = 10.0;
    double dt = 0.01;

    // Solve the system using Euler's Method
    euler_method(t_initial, t_final, dt, initial_conditions);

    return 0;
}</pre>
<p><img alt="" height="281" src="/images/mass-spring_damper_syste...2.c.png" width="400"/><br/><br/></p>
<p></p>
<p></p>
<p></p>
<p></p>
<p></p>
<p></p>
<h1>Brython</h1>
<p><a href="https://en.wikipedia.org/wiki/Python_(programming_language)">https://en.wikipedia.org/wiki/Python_(programming_language)</a></p>
<h4>Examples:</h4>
<p style="padding-left: 30px;"><a href="https://gist.github.com/mdecycu/d9082d678096bd58378d6afe2c7fa05d">https://gist.github.com/mdecycu/d9082d678096bd58378d6afe2c7fa05d</a></p>
<p style="padding-left: 30px;"><a href="https://www.geeksforgeeks.org/python-programming-examples/">https://www.geeksforgeeks.org/python-programming-examples/</a></p>
<p style="padding-left: 30px;"><a href="https://www.programiz.com/python-programming/examples">https://www.programiz.com/python-programming/examples</a></p>
<p style="padding-left: 30px;"><a href="https://www.freecodecamp.org/news/python-code-examples-sample-script-coding-tutorial-for-beginners/">https://www.freecodecamp.org/news/python-code-examples-sample-script-coding-tutorial-for-beginners/</a></p>
<h4>Python Tutorial:</h4>
<p style="padding-left: 30px;"><a href="https://docs.python.org/3/tutorial/">https://docs.python.org/3/tutorial/</a></p>
<p style="padding-left: 30px;"><a href="https://docs.python.org/3/tutorial/introduction.html">An informal introduction to Python</a></p>
<h4>Indentation (Python 採 4 個 Spaces 縮排, 以界定執行範圍)</h4>
<h4>Variables (<a href="https://github.com/python/cpython/blob/3.11/Lib/keyword.py">Python Keywords</a>)</h4>
<h4>Comments (# 單行註解, 三個單引號或三個雙引號標註多行註解)</h4>
<h4><a href="https://docs.python.org/3/tutorial/introduction.html#numbers">Numbers</a> (整數 int(), 浮點數 float())</h4>
<h4><a href="https://docs.python.org/3/tutorial/introduction.html#strings">Strings</a> (字串)</h4>
<h4>print (Python 內建函式, <a href="https://docs.python.org/3/library/functions.html#print">print()</a> 函式)</h4>
<p><a href="https://docs.python.org/3/tutorial/controlflow.html">Python control flow tools</a></p>
<h4 style="padding-left: 30px;"><a href="https://docs.python.org/3/tutorial/controlflow.html#for-statements">for</a></h4>
<h4 style="padding-left: 30px;"><a href="https://docs.python.org/3/tutorial/controlflow.html#if-statements">if</a></h4>
<h4 style="padding-left: 30px;"><a href="https://docs.python.org/3/tutorial/controlflow.html#the-range-function">range</a></h4>
<h4>open</h4>
<h4>read</h4>
<h4><a href="https://docs.python.org/3/tutorial/introduction.html#lists">lists</a></h4>
<h4><a href="https://docs.python.org/3/tutorial/datastructures.html#tuples-and-sequences">tuples</a></h4>
<h4><a href="https://docs.python.org/3/tutorial/datastructures.html#dictionaries">dictionaries</a></h4>
<h4><a href="https://docs.python.org/3/tutorial/controlflow.html#defining-functions">functions</a></h4>
<h4><a href="https://docs.python.org/3/tutorial/errors.html#exceptions">try ... except</a></h4>
<h4><a href="https://docs.python.org/3/tutorial/controlflow.html#break-and-continue-statements-and-else-clauses-on-loops">break</a></h4>
<h4><a href="https://docs.python.org/3/tutorial/controlflow.html#pass-statements">pass</a></h4>
<h4><a href="https://docs.python.org/3/tutorial/classes.html?highlight=classes">classes</a></h4>
<p>這個頁面 demo 如何在同一頁面下納入多個線上 Ace 編輯器與執行按鈕 (<a href="/downloads/practice_html.txt">practice_html.txt</a> 動態頁面超文件).</p>
<p><a href="/downloads/practice_html.txt">practice_html.txt</a> 動態頁面超文件應該可以在啟動 Brython 時, 設定將 .py 檔案放入 downloads/py 目錄中引用.</p>
<p>亦即將所有對應的 html 也使用 Brython 產生, 然後寫為 <a href="https://docs.python.org/3/tutorial/classes.html">class</a> 後, 在範例導入時透過 <a href="https://docs.python.org/3/tutorial/classes.html#instance-objects">instance</a> 引用.</p>
<pre class="brush:html;auto-links:false;toolbar:false" contenteditable="false">&lt;!-- 啟動 Brython --&gt;
&lt;script&gt;
window.onload=function(){
brython({debug:1, pythonpath:['/static/','./../downloads/py/']});
}
&lt;/script&gt;</pre>
<p>從 1 累加到 100:</p>
<p><button id="add1to100">1 add to 100</button></p>
<p>將 iterable 與 iterator <a href="https://home.gamer.com.tw/creationDetail.php?sn=4337438">相關說明</a>, 利用 Brython 與 Ace Editor 整理在這個頁面.</p>
<!-- 導入 brython 程式庫 -->
<p>
<script src="/static/brython.js"></script>
<script src="/static/brython_stdlib.js"></script>
</p>
<!-- 啟動 Brython -->
<p>
<script>
window.onload=function(){
brython({debug:1, pythonpath:['/static/','./../downloads/py/']});
}
</script>
</p>
<p><!-- 導入 FileSaver 與 filereader --></p>
<p>
<script src="/static/ace/FileSaver.min.js" type="text/javascript"></script>
<script src="/static/ace/filereader.js" type="text/javascript"></script>
</p>
<p><!-- 導入 ace --></p>
<p>
<script src="/static/ace/ace.js" type="text/javascript"></script>
<script src="/static/ace/ext-language_tools.js" type="text/javascript"></script>
<script src="/static/ace/mode-python3.js" type="text/javascript"></script>
<script src="/static/ace/snippets/python.js" type="text/javascript"></script>
</p>
<p><!-- 導入 gearUtils-0.9.js Cango 齒輪繪圖程式庫 -->
<script src="/static/Cango-24v03-min.js"></script>
<script src="/static/gearUtils-09.js"></script>
<script src="/static/SVGpathUtils-6v03-min.js"></script>
<script src="/static/sylvester.js"></script>
<script src="/static/PrairieDraw.js"></script>
</p>
<p><!-- 請注意, 這裡使用 Javascript 將 localStorage["kw_py_src1"] 中存在近端瀏覽器的程式碼, 由使用者決定存檔名稱--></p>
<p>
<script type="text/javascript">
function doSave(storage_id, filename){
    var blob = new Blob([localStorage[storage_id]], {type: "text/plain;charset=utf-8"});
    filename = document.getElementById(filename).value
    saveAs(blob, filename+".py");
}
</script>
</p>
<p>
<script type="text/python3">
from browser import document as doc
import ace
# 清除畫布
def clear_bd1(ev):
    bd = doc["brython_div1"]
    bd.clear()
Ace1 = ace.Editor(editor_id="kw_editor1", console_id="kw_console1", container_id="kw__container1", storage_id="kw_py_src1" )
# 從 gist 取出程式碼後, 放入 editor 作為 default 程式
def run1():
    # 利用 get 取下 src 變數值
    try:
        url = doc.query["src"]
    except:
        url = "https://gist.githubusercontent.com/mdecourse/0229a8a017091476a79700b8a190f185/raw/c3a6deaf717f8f2739a4b1392a5ab10936e9693a/from_1_add_to_10_1.py"
    prog = open(url).read()

    # 將程式載入編輯區
    Ace1.editor.setValue(prog)
    Ace1.editor.scrollToRow(0)
    Ace1.editor.gotoLine(0)
    # 直接執行程式
    #ns = {'__name__':'__main__'}
    #exec(prog, ns)
    # 按下 run 按鈕
    Ace1.run()

# 執行程式, 顯示輸出結果與清除輸出結果及對應按鈕綁定
doc['kw_run1'].bind('click', Ace1.run)
doc['kw_show_console1'].bind('click', Ace1.show_console)
doc['kw_clear_console1'].bind('click', Ace1.clear_console)
doc['clear_bd1'].bind('click', clear_bd1)
# 呼叫函式執行
run1()
</script>
</p>
<p><!-- add 1 to 100 開始 -->
<script type="text/python3">
from browser import document as doc
import ace

# 清除畫布
def clear_bd1(ev):
    bd = doc["brython_div1"]
    bd.clear()

# 利用 ace 中的 Editor 建立 Ace2 物件, 其中的輸入變數分別對應到頁面中的編輯區物件
Ace2 = ace.Editor(editor_id="kw_editor1", console_id="kw_console1", container_id="kw__container1", storage_id="kw_py_src1" )

add1to100_url = "https://gist.githubusercontent.com/mdecourse/0229a8a017091476a79700b8a190f185/raw/c48e37714f055c3a0027cbfef59e442a6ef659b9/from_1_add_to_100_1.py"

# 從 gist 取得程式碼
add_src = open(add1to100_url).read()
def add(ev):
    Ace2.editor.setValue(add_src)
    Ace2.editor.scrollToRow(0)
    Ace2.editor.gotoLine(0)
    Ace2.run()

# id 為 "add1to100" 的按鈕點按時, 執行 add 方法
doc["add1to100"].bind('click', add)
</script>
</p>
<p><!-- add 1 to 100 結束--></p>
<!-- editor1 開始 -->
<p><!-- 用來顯示程式碼的 editor 區域 --></p>
<div id="kw_editor1" style="width: 600px; height: 300px;"></div>
<p><!-- 以下的表單與按鈕與前面的 Javascript doSave 函式以及 FileSaver.min.js 互相配合 --></p>
<p><!-- 存擋表單開始 --></p>
<form><label>Filename: <input id="kw_filename" placeholder="input file name" type="text"/>.py</label> <input onclick="doSave('kw_py_src1', 'kw_filename1');" type="submit" value="Save"/></form>
<p><!-- 存擋表單結束 --></p>
<p></p>
<p><!-- 執行與清除按鈕開始 --></p>
<p><button id="kw_run1">Run</button> <button id="kw_show_console1">Output</button> <button id="kw_clear_console1">清除輸出區</button><button id="clear_bd1">清除繪圖區</button><button onclick="window.location.reload()">Reload</button></p>
<p><!-- 執行與清除按鈕結束 --></p>
<p></p>
<p><!-- 程式執行 ouput 區 --></p>
<div style="width: 100%; height: 100%;"><textarea autocomplete="off" id="kw_console1"></textarea></div>
<p><!-- Brython 程式執行的結果, 都以 brython_div1 作為切入位置 --></p>
<div id="brython_div1"></div>
<!-- editor1 結束 --><hr/><!-- ########################################## -->
<p>從 1 累加到 100 part2:</p>
<p><button id="add1to100part2">1 add to 100</button><button id="cango_three_gears">cango_three_gears</button><button id="bsnake">BSnake</button><button id="aitetris">AI Tetris</button><button id="threejsblock">Rotating Block</button></p>
<p><!-- 請注意, 這裡使用 Javascript 將 localStorage["kw_py_src2"] 中存在近端瀏覽器的程式碼, 由使用者決定存檔名稱--></p>
<p>
<script type="text/python3">
from browser import document as doc
import ace
# 清除畫布
def clear_bd2(ev):
    bd = doc["brython_div2"]
    bd.clear()
Ace3 = ace.Editor(editor_id="kw_editor2", console_id="kw_console2", container_id="kw__container2", storage_id="kw_py_src2" )
# 從 gist 取出程式碼後, 放入 editor 作為 default 程式
def run2():
    # 利用 get 取下 src 變數值
    try:
        url = doc.query["src2"]
    except:
        url = "https://gist.githubusercontent.com/mdecourse/0229a8a017091476a79700b8a190f185/raw/c3a6deaf717f8f2739a4b1392a5ab10936e9693a/from_1_add_to_10_1.py"
    prog = open(url).read()

    # 將程式載入編輯區
    Ace3.editor.setValue(prog)
    Ace3.editor.scrollToRow(0)
    Ace3.editor.gotoLine(0)
    # 直接執行程式
    #ns = {'__name__':'__main__'}
    #exec(prog, ns)
    # 按下 run 按鈕
    Ace3.run()

# 執行程式, 顯示輸出結果與清除輸出結果及對應按鈕綁定
doc['kw_run2'].bind('click', Ace3.run)
doc['kw_show_console2'].bind('click', Ace3.show_console)
doc['kw_clear_console2'].bind('click', Ace3.clear_console)
doc['clear_bd2'].bind('click', clear_bd2)
# 呼叫函式執行
run2()
</script>
</p>
<p><!-- add 1 to 100 part2 開始 -->
<script type="text/python3">
from browser import document as doc
import ace

# 清除畫布
def clear_bd2(ev):
    bd = doc["brython_div2"]
    bd.clear()

# 利用 ace 中的 Editor 建立 Ace2 物件, 其中的輸入變數分別對應到頁面中的編輯區物件
Ace4 = ace.Editor(editor_id="kw_editor2", console_id="kw_console2", container_id="kw__container2", storage_id="kw_py_src2" )

# 透過 Ace4 以類別建立一個通用的 button2, 可以在多個案例中將 gist 程導入編輯區

class button2:
    def __init__(self, url):
        self.url = url

    # 記得加入 event 輸入變數
    def do(self,ev):
        Ace4.editor.setValue(open(self.url).read())
        Ace4.editor.scrollToRow(0)
        Ace4.editor.gotoLine(0)
        Ace4.run()

add1to100_url = "https://gist.githubusercontent.com/mdecourse/0229a8a017091476a79700b8a190f185/raw/c48e37714f055c3a0027cbfef59e442a6ef659b9/from_1_add_to_100_1.py"

# 從 gist 取得程式碼
add_src = open(add1to100_url).read()
def add2(ev):
    Ace4.editor.setValue(add_src)
    Ace4.editor.scrollToRow(0)
    Ace4.editor.gotoLine(0)
    Ace4.run()

# id 為 "add1to100part2" 的按鈕點按時, 執行 add 方法
doc["add1to100part2"].bind('click', add2)
# 以下為運用 button2 class 的通用 gist 程式導入區
################################## cango_three_gears start
cango_three_gears_url = "https://gist.githubusercontent.com/mdecycu/d9082d678096bd58378d6afe2c7fa05d/raw/f7a85d737d6723d5e34c526d5daee990ed92c32b/cango_three_gears_brython_div2.py"
cango_three_gears = button2(cango_three_gears_url)
doc["cango_three_gears"].bind("click", cango_three_gears.do)
################################## cango_three_gears end
################################## bsnake start
bsnake_url = "https://gist.githubusercontent.com/mdecycu/d9082d678096bd58378d6afe2c7fa05d/raw/f7a85d737d6723d5e34c526d5daee990ed92c32b/kmol_snakey.py"
bsnake = button2(bsnake_url)
doc["bsnake"].bind("click", bsnake.do)
################################## bsnake end
################################## aitetris start
aitetris_url = "https://gist.githubusercontent.com/mdecycu/d9082d678096bd58378d6afe2c7fa05d/raw/f7a85d737d6723d5e34c526d5daee990ed92c32b/pygame_to_brython_tetris_ai.py"
aitetris = button2(aitetris_url)
doc["aitetris"].bind("click", aitetris.do)
################################## aitetris end
################################## threejsblock start
threejsblock_url = "https://gist.githubusercontent.com/mdecycu/2c6323eff49b496d1bafd210f3ec9707/raw/df37802f9e8a386b6424f7945af622b1cd0a9ca5/threejs_rotating_block.py"
threejsblock = button2(threejsblock_url)
doc["threejsblock"].bind("click", threejsblock.do)
################################## threejsblock end
</script>
</p>
<p><!-- add 1 to 100 part2 結束--></p>
<!-- editor2 開始 -->
<p><!-- 用來顯示程式碼的 editor 區域 --></p>
<div id="kw_editor2" style="width: 600px; height: 300px;"></div>
<p><!-- 以下的表單與按鈕與前面的 Javascript doSave 函式以及 FileSaver.min.js 互相配合 --></p>
<p><!-- 存擋表單開始 --></p>
<form><label>Filename: <input id="kw_filename2" placeholder="input file name" type="text"/>.py</label> <input onclick="doSave('kw_py_src2', 'kw_filename2');" type="submit" value="Save"/></form>
<p><!-- 存擋表單結束 --></p>
<p></p>
<p><!-- 執行與清除按鈕開始 --></p>
<p><button id="kw_run2">Run</button> <button id="kw_show_console2">Output</button> <button id="kw_clear_console2">清除輸出區</button><button id="clear_bd2">清除繪圖區</button><button onclick="window.location.reload()">Reload</button></p>
<p><!-- 執行與清除按鈕結束 --></p>
<p></p>
<p><!-- 程式執行 ouput 區 --></p>
<div style="width: 100%; height: 100%;"><textarea autocomplete="off" id="kw_console2"></textarea></div>
<p><!-- Brython 程式執行的結果, 都以 brython_div1 作為切入位置 --></p>
<div id="brython_div2"></div>
<!-- editor2 結束 --><hr/>
<p>
<script src="https://unpkg.com/three@0.144.0/build/three.js" type="text/javascript"></script>
</p>